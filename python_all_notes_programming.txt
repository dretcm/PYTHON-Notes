------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------" Python "------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------

--------->> FUNCION MAIN : NAME MAIN : import from other directory :

//INCOVAR UNA FUNCION ANTES QUE TODAS LAS LINEAS DE COMANDO ANTERIORES A ESTA :

def principal():
	print("gatos")
print("hola")

if __name__=="__main__":
	principal()
	print("felinos")

SALIDA ::

gatos
felinos
hola

# diference between call the script(test.py) wihtout "if __name__=='__main__':" and using it :

def hello():
	print('hello')

hello()

## >>> from test import hello
## hello
## >>>


def hello():
	print('hello')

if __name__=='__main__':
	hello()

## >>> from test import hello
## >>>
## conclusions: if we "import" it script, it will not run if we use 'if __name__=='__main__:'


# import from other directory or folder :
#
packagues
images
main.py
#
from packagues.my_script import my_function,my_class

# other form
import sys
sys.path.append('\\packagues')
from my_script import my_function


---------->>> DICCIONARIO MULTIPLE : dict :

dic_account={"a":{1:"a",2:"ADMINISTRADOR",3:"Todo el mundo"}}

f ={'alex':{1:123,2:"alexander",3:"peru"}}
f['alex'][1]=222
print(f['alex'][1])

def go_back():
	if(c_user.get() not in dic_account):
		dic_account[c_user.get()]={}
		dic_account[c_user.get()][1] = c_pass.get()
		dic_account[c_user.get()][2] = c_fullname.get()
		dic_account[c_user.get()][3] = c_var_pais.get()

 -- ELIMINACION DE ELEMENTOS EN UN DICCIONARIO :

listin = {'Juan':123456789, 'Pedro':987654321,"Luis":123456789}
print(listin)

listin.pop("Pedro"," ")      // PRIMERA FORMA DE ELEMINAR (LLAVE O KEY DEL DICCIONARIO, VALORO VALUE).
print(listin)
			     //USO DEL " DEL " ELIMINAR
del(listin["Luis"])         //SEGUNDA FORMA : SOLO SE ENVIA EL DICCIONARIO Y DENTRO LA KEY O LLAVE.
print(listin)

listin.clear() 		// PARA ELIMINAR, vaciar, TODO EL DICCIONARIO Y VOLVERLO ASI "{}".

listin.items()   	// TODO EL DICCIONARIO CON KEYS Y VALUES :

listin.keys() 	// RETORNA TODAS LAS LLAVES O CLAVES EN ESTE DICCIONARIO DEVOLVERIA TODOS LOS NOMBRES("Juan","Pedro","Luis").

listin.values()  //RETORNA TODOS LOS VALORES AQUI SERIAN(LOS NUMEROS TELEFONICOS).

listin.get("Luis","no existe este valor en el diccionario")    //si se encuentra luis en este diccionario entonces retorna key & value, caso contrario imprimer la cadena del segundo parametro.

print("Pedro" in listin)     //COMO LOS VALORES TIPICOS TRUE Y FALSE.

 -- MERGE:

a = {'a':1, 'b':2}
b ={'c':3, 'd':4}

c = {*a,*b}   # {'c', 'a', 'b', 'd'}

c = {**a,**b}  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

c = a.copy()
c.update(b)   # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

c = a | b  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

c = dict(a.items() | b.items())  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

-- tours with dictionarys:

a = ['a','b','c','d']
b = [1,2,3,4]

dictionary = {value:b[index]  for index, value in enumerate(a)} 
# output:{'a': 1, 'b': 2, 'c': 3, 'd': 4}


>>> text = "hola gente como anda"
>>> {word: text.count(word) for word in set(text)}
{'h': 1, 'g': 1, 'c': 1, 'o': 3, 'l': 1, 'e': 2, 'd': 1, 't': 1, ' ': 3, 'm': 1, 'n': 2, 'a': 3}



# the key of dictionary variants:

>>> data = {}
>>> data[1] = "a"
>>> data[1.0] = "b"
>>> data[2-1] = "c"
>>> data
{1: 'c'}
>>>

---------------------------->>> PARA QUE FUNCION EL INT PRIMARY KEY AUTOINCREMENT :

("create table empleados(id integer primary key autoincrement,name text,salario float,bono text)")

alex.insert_data("insert into empleados (name,salario,bono) values(?,?,?)",lista_datos)  //el id se aumentara solo

---------------------------->>> for and while with else :

data = [1 , 3, 5, 8]
target = 4
for element in data:
	if element == target:
		print('Yes')
		break
else:
	print("No")

# output with for: No

target = 3
i = 0
while i < len(data):
	if data[i] == target:
		print('Yes')
		break
	i += 1
else:
	print("No")	

# output with for: Yes

---------------NUEVO -----> PICKLE USE: 

import pickle

dic ={1:'alex',2:'carpio',3:'mamani'}
ga = open("todo.pickle",'wb')
pickle.dump(dic,ga)
ga = open("todo.pickle",'rb')
dic1 = pickle.load(ga)
print(dic1[2])
ga.close()


------------------->>> strip : find : trucks :

# strip
palabra = '   HOLA   '
palabra.strip(" ") #output: 'HOLA'   # borra todos los espacios de la cadena.

# find
chain = 'hello word'
print(chain.find('w'))  # return 6 # return the position of the letter.
print(chain.find('z'))  # return -1 # since it doesnt exist

# subsets : sub-index range:

string = 'playing'
print(string[:3]) # pla   # normal example
print(string[:1000]) # playing  # Not Error, even where the final position not exists.

print(string[100]) Error, because only there will error when it be a "index" and not exists it.
print(string[100:]) # not Error # output: ''
print(string[100:1200]) # not Error # output: ''

print(string[:-5]) # pl
print(string[:-7]) # ''
print(string[:-1000]) # len(string[:-1000]) = 0    # the same happens when we go backward. # output: ''
print(string[100:-1200]) # not Error # output: ''

# [ start : end : step ]
>>> text = "hello its my example"
>>> text[:10:2]
'hlois'

>>> text[5:15:3]
' syx'

>>> text[5:15:5]
' m'

>>> text[:10:-1]   # remove "hello its m" where "m" is the index "10" and show the text in reverse.
'elpmaxe y'

>>> text[5:10:-1]
''

>>> text[10::-1]
'm sti olleh'

>>> text[10:5:-1]
'm sti'

>>> text[10::-2]
'msiolh'

>>> text[:-5:-1]
'elpm'


# for search a subset or sub-string:

def find_position(string, sub):
        lenght = len(sub)
        for i in range(len(string)):
                if string[i:i+lenght] == sub:
                        return (i,i+lenght)
        return (0,0)

print(find_position('la musica no esta fuerte', 'no esta fuerte'))


------------------->>> IPython :

from IPython.display import clear_output
clear_output(wait=True) # clear the screen.

------------------->>> ASIGNACION MULTIPLE : operator " := " : use  "is" :

cadena = "a-b-c"
a, b, c = cadena.split("-")
print(a)
print(b)
print(c)

cadena = ["1","2","3"]
a, b, c = map(int, cadena) # change of string to integer
print(a)
print(b)
print(c)

# SALIDA : 

a
b
c


# use the operator " := ":

>>> func = lambda x: x**2
>>>
>>> if func(3) >= 0:
...     print(func(3))  # we call the func twice
...
9

>>> if (x:=func(3)) >= 0:   # here, "x" take the value of "func(3)" which is "9"
...     print(x) 
...
9


>>> if x:=func(3) >= 0:    # here, "x" take the value of condition "func(3) >= 0" which is "True"
...     print(x)
...
True



# use "is" :

>>> a = "".join(["a", "e"])
>>> b = "a" + "e"
>>> c = "ae"
>>> a is b
False
>>> b is c
True
>>> a == b
True
>>> a is c
False
>>> b is c
True
>>>

1 ----------> use print - end : " ; " : type : len : format : print with f'' :

# print end or print continious :
print("para que lo imprimido sea de forma lateral: ",variable,end=" ")

# usar ";" al final es como saltar en el script, e.g:

a = 3; b= 5; print(a+b)

# lo anterior es igual a decir:

a = 3
b = 5
print(a+b)

# use "type", it used to know the type of variable(e.g):
print(type(3)) # <class 'int'>
print(type("hello")) # <class 'str'>
print(type([12,'a',3])) # <class 'list'>

class Avestruz:
	...
	...
	...
ave = Avestruz()
print(type(ave).__name__) # Avestruz, retorna el nombre de la clase.

chain = 'hello'
print(len(chain)) # return the lenght od the chain. # 5


# the UPPERCASES and numbers are minors to LOWERCASES:

print('A' < 'a') # output : True

print(3 < 'a') # output : True

print('A' > 'a') # output : False

# it works according the ascii code (https://elcodigoascii.com.ar).

# print with f'' :
name = 'pedro'
print(f' name: {name}') # output: name: pedro

print(f' abc{10}ef{2}ghijk{32}{01}{[1,2,3]}') # output: abc10ef2ghijk3201[1,2,3]

# trucks with format:

print('{:} = 12'.format('x')) # output: x = 12

timer = "{:02d}{:02d}:{:02d}".format(3,7,12) # output: 03:07:12
timer = "{:02}{:02}:{:02}".format(3,7,12) # output: 03:07:12
timer = "{:03}{:03}:{:05}".format(3,7,12) # output: 003:007:00012


1.5 -------> use exec : use format : use bytes : use eval :

>>>exec("x=3 \ny=4 \nprint(x+y)")
7
>>> exec("def aea(x):\n\treturn 4*x\nprint(aea(5))")
20

# format :
>>> format(15, "b")
'1111'
>>> bin(15)
'1111'
>>> format(0.8, "%")
'80.000000%'

# bytes  :
>>> bytes("hola", "utf-8")
b'hola'

# eval :
>>> x = 10
>>> y = 2
>>> eval('(x*y) - y')
18

2 ---------> listas : list : dtype list :

# the string's or 'str' are INMUTABLES. The list, by other way, are MUTABLES,(i.e):
string = "hello"
string[0] = "a" # error

L = ['h','o','l','a']
L[0] = 'a' # dont problem 
print(L) # ['a','o','l','a']

lista.append(añade_elemento) # para añadir elementos a las listas.
lista.extend([x,y,z]) # para exterder a la lista con elementos puestos.
lista.insert(poscicion,valor) # para colocar un elemento " y "en la posicion "x".

a = []
a.insert(0,3)
a # [3]
a.insert(0,5)
a # [5,3]

lista.clear() # para eliminar todos los elementos de la lista.

lista.pop(posicion_a_eliminar) # para eliminar cierto elemto en la poscicion "x".

lista.remove(valor_a_eliminar)

lista.index(palabra_a_buscar) #te devuelve la poscicion.

lista.sort() # ordena la lista.
# para ordenar una lista se usa el comando "lista.sort()" y para invertirla o verla al revez seria "lista.sort(reverse=True)".
# tambien se puede usar "lista.reverse()" para voltear la lista pero no ordenarla
# sort with key.
>>> data = [[1,5], [2,-3], [6,0], [2,3]]
>>> data.sort(key=lambda x: x[0]+x[1])
>>> data
[[2, -3], [2, 3], [1, 5], [6, 0]]


lista.count(element)  # retornara el numero de veces que aparece ele element en la lista.


# List Comprehension : Listas Comprimidas:

# example 1:
elements = [x for x in range(10)]  # output: [0,1,2,3,4,5,6,7,8,9]

# example 2:
elements = [x for x in range(1,11) if x%2==0]  # output: [2,4,6,8,10]  # pair
elements = [x for x in range(1,11) if x%2==1]  # output: [1,3,5,7,9] # odd
elements = [0 if x<5 else x for x in range(10)]  # output: [0,0,0,0,0,5,6,7,8,9]
elements = [y for x in range(1,4) for y in range(x)]  # output: [0,0,1,0,1,2]

# example 3:
elements = [word for word in input('Enter name: ')]  # output: [p,e,d,r,o]
elements = [int(n) for n in input('Enter numbers(1,2,3,4,...): ').split(',')]  # output: [21,4,7,9,43]

# example 4:
elements = [[i,j] for i in range(10) for j in range(10)]  # output: [[0,0],[0,1],[0,2].......[9,8],[9,9]]
elements = [[i*j for j in range(10)] for i in range(10)]  # output: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],...., [0, 9, 18, 27, 36, 45, 54, 63, 72, 81]]


# example 5:

>>> text = "hola gente como anda"
>>> dict([(word, text.count(word)) for word in set(text)])  
{'h': 1, 'o': 3, 'l': 1, 'a': 3, ' ': 3, 'g': 1, 'e': 2, 'n': 2, 't': 1, 'c': 1, 'm': 1, 'd': 1}

# example with dictionary : dict :

>>> {word: text.count(word) for word in set(text)}
{'h': 1, 'g': 1, 'c': 1, 'o': 3, 'l': 1, 'e': 2, 'd': 1, 't': 1, ' ': 3, 'm': 1, 'n': 2, 'a': 3}


# record that if using 'for' for iterate list, tuple, is recomend use the same type of iterate:

for i in list:
	if i in tuple:   # its convert list to tuple and is very expensive.
	 	pass

for i in list:
	if i in list2:   # its better
	 	pass

for i in tuple:
	if i in tuple2:   # its also better but for tuple.
	 	pass

# operation wirt collections :

a = ['a'] * 10
print(a)  # ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'] # len(a) : 10

a = [3] * 10
print(a)  # [3, 3, 3, 3, 3, 3, 3, 3, 3, 3] # len(a) : 10

n = 5
elements = list(range(1,n+1))
print([elements] * n)   # [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]


# comparate :

print([1,2,3] > [1]) # True
print([1,2,3] > [2]) # False
print([15,2,23] > [16]) # False
print([15,62,23] > [15]) # True


3-->>

#para verificar si una palabra esta en una cadena se debe usar

palabra.count('hi')------average es promedio

#donde palabra es la cadena, .count es el metodo o method, y lo 1 va ('hi') es la palabra q queremos verificar si esta en la cadena.
#el  "lista.count(2) tambien sirve para listas y ver cuantas vesces esta ese numero en la lista, tipo contador.
# ejemplo normalico:
list=[1,1,2,3,1,5,5,5,6,7,5]
for i in range(len(list)):
    cont=list.count(list[i])
# veremos que sacara la cantidad de vesces que hay un mismo numero en la lista
# ejem  " cont=list.count(1) " donde con seria " cont=3 ".
# ejem  " cont=list.count(7) " donde con seria " cont=1 ".
# ejem  " cont=list.count(5) " donde con seria " cont=4 ".

# Este es un ejemplo avanzado:

list=[1,1,2,3,1,5,5,5,6,7,5]
max(set(list), key=list.count)
print("the mode is: ",max(set(list), key=list.count))

#LISTA COMPRIMIDA CON FOR AND IF

f=[ i for i in [1,2,3,4,5,6,7,8,9,10] if i % 2==1]   #extrae los numeros primos de 1 a 10.
print(f)  

# o con un filter y lambda:
                       
print(list(filter(lambda x:x%2==1,[1,2,3,4,5,6,7,8,9,10])))

3.5 ----------->> lambda examples and list.sort(key) : sorted(key) :

a = 3
function = lambda x: x*10

print(function(a)) # 30

a = 3
b = 2
function = lambda x,y: x+y

print(function(a,b)) # 5


names = ['Ruben F', 'Pedro B','Luisa C','Julieta A']
sorted_names = sorted(names, key = lambda name: name[-1])
names.sort(key = lambda name: name[-1])

print(sorted_names)
print(names)

# Output:

#['Julieta A', 'Pedro B', 'Luisa C', 'Ruben F']
#['Julieta A', 'Pedro B', 'Luisa C', 'Ruben F']

4---->> use random :

# para genera numeros aleatorios se debe usar
import random
val=random.randint(minimo,maximo)
val = random.randrange(minimo,maximo) # 2 option
# en minimo y maximo van los limites

# escoje un elemento aleatoriamente.
random.choice([1,2,3,4,5,'a','z']) # output: 3 o 'a' o etc.

# escoje un numero de elementos aleatoriamente donde se pueden volver a repetir.
# 'k' vendria a ser el numero de elementos.
random.choices([1,2,3,4,5,'a','z'], k=3)  # output: [3,'z',1] o ['a',5,5] o [4,4,2], etc.

# escoje un numero de elementos aleatoriamente donde se NO pueden volver a repetir.
random.choices([1,2,3,4,5,'a','z'], k=3)  # output: [3,'z',1] o ['a','z',5] o [4,1,2], etc.

# revuelve, desacomoda, desordena, sacude nuesta lista.
random.shuffle([1,2,3,4,5,'a','z']) # output: ['a', 4, 2, 3, 5, 'z', 1]

# numero aleatorio entre el rango de [0-1]:
random.random() # output: 0.1463594498552807

# seed o semilla, para manejar la estancia de nuestro random.

random.seed(0) # tambien puede ser (1),(2)..(144).

# Random float:  2.5 <= x < 10.0
random.uniform(2.5, 10.0) # output: 3.1800146073117523

# random.randint(0,20) / 10 -1   <=>   random.uniform(-1,1)

# randrange tipo for.
randrange(0, 101, 2)   # output: 26

5--->> tuple : tuplas : tuples :

# the tuples are a whole(set) of elements "not modifiable", is as type const.

a = tuple([1,2,2,2,2,3,3])
print(a)   # (1,2,2,2,2,3,3)
print(a.count(2))  # 4 # quantity of certain number.
print(a.index(3))  # 5 # position of certain number.
print(help(tuple))  # information about this

6--->> use pip : use id : direction of memory :

# para instalar algo se podria usar "pip install Howdoi " como ejemplo.
>pip install pandas
>pip install numpy

# use "id" :

a = '3'
b = [1,2,3,True,'<']
c = 120
d = False
e = a
f = '' + a
g = b[:]

print(id(a)) # return the position of memory.
print(id(b))
print(id(c))
print(id(d))
print(id(e))
print(a is e)
print(a is f)
print(g is b)

# output:
1535921981872
1535931294720
1535921444944
140711232166024
1535921981872
True
True
False


7--->> major : max : min : sum : abs :

# usar funtion max(algo) or min(algo) or sum(algo) de una lista o colecciones para hallar el maximo, minimo, y suma total.
# abs(x): para el valor absoluto de x.

# un metodo para hallar el menor y menor puede ser usando(en vectores seria como escalar vectores): 
## mayor = [ a + b + abs(a - b)]/2  # para 2 numeros

# a = 5
# b = 7
# a + b => -----> + ------->
# abs(a-b) => -->
# (a+b)+abs(a-b) =>  -----> + -------> + --> => -------------->
# [(a+b)+abs(a-b)]/2 => -------> => 7

## menor = [ a + b - abs(a - b)]/2

# a = 5
# b = 7
# a + b => -----> + ------->
# abs(a-b) => -->
# (a+b)-abs(a-b) =>  -----> + -------> - --> => ---------->
# [(a+b)+abs(a-b)]/2 => -----> => 5


# Example:

def major(a,b,c):
        first = (a+b+abs(a-b))/2
        return int((first + c + abs(first-c))/2)


# Example 2:

def major(a,b,c):
        if a>b:
                if a>c:
                        return a
                else:
                        return c
        if b>c:
                return b
        return c
                        

a = int(input('enter number: '))
b = int(input('enter number: '))
c = int(input('enter number: '))
print(major(a,b,c))

8--->> use zip python : zip() :

# usar "zip", esta sirve para unir listas, o colecciones para transformarlas en un dicionario con sus respectivas llaves o keys y valores o values
ejemplo:
list1=[]
list2=[]
dates1=dict(zip(list1,list2))
# donde "list1" es igual a "keys"
# y "list2" es igual a "values"

a = (1,2)
b = (3,4)
list(zip(a,b)) # [(1,2),(3,4)] # unmutable

>>> list(zip([1,2],[3,4])) # mutable
[(1, 3), (2, 4)]

>>> list(zip([1,2],[3,4], [5,6]))
[(1, 3, 5), (2, 4, 6)]


# example with two list:
>>> names = ['Aron', 'Breyton', 'Camile', 'Derek']
>>> ages = [13, 23, 87, 2]
>>> for name, age in zip(names, ages):  # [('Aron', 13), ('Breyton', 23), ...]
	if age < 15:
		print(name)
Aron
Derek


# with 3 elements
>>> names = ['Aron', 'Breyton', 'Camile', 'Derek']
>>> ages = [13, 23, 87, 2]
>>> citys = ['A', 'B', 'C', 'D']
>>> for name, age, city in zip(names, ages, citys):  # [('Aron', 13, 'A'), ('Breyton', 23, 'B'), ...]
	if age < 15:
		print(name, city)
Aron A
Derek D


9--->> set operations (|,^,-,&): use set :

# el "set()" sirve para convertir una lista,tupla,etc a un conjunto
# donde lo más relevante de un conjunto es no repetir ningun elemento
# ejemplo:
list1=[1,1,1,2,3,3,4,5,5,7]
# pero con set(list1) o sea
list2=set(list1)
print(list2) # [1,2,3,4,5,7]

a = set([1,2,3])
print(a) # {1,2,3}
a.add(5) # add elemento at end
print(a) # {1,2,3,5}
a.pop()  # by default the position to delete is 0.
print(a) # {2,3,5}

more : https://snakify.org/en/lessons/sets/

set operations : 

c1 = {1, 2, 3, 4, 5, 6}
c2 = {2, 4, 6, 8, 10}
c3 = {1, 2, 3}
c4 = {4, 5, 6}

print('union: ',c1 | c2)
print('intersection: ',c1 & c2)
print('union of all sets: ',c1 & c2 & c3 & c4)
print('set diffetence: ',c1 - c2)
print('symmetric difference: ',c1 ^ c2)
print('symmetric difference: ',(c1 - c2) | (c2 - c1))

# output:
union:  {1, 2, 3, 4, 5, 6, 8, 10}
intersection:  {2, 4, 6}
union of all sets:  set()
set diffetence:  {1, 3, 5}
symmetric difference:  {1, 3, 5, 8, 10}
symmetric difference:  {1, 3, 5, 8, 10}

10--->> import math :

# para hacer potencias y raices importamos la libreria math "import math".

import math
print(math.pow(x,y))   # donde " x " es el numero y " y " es a cuanto queremos elevarlo.
print(math.sqrt(x))    # donde podremos sacarle raices cuadradas, pero si queires cubicas usemos:
print(round(x**(1/3))) # asi serian una raiz cubica, obvio que hay muchas más formas pero pense si podia hacer eso.
print(x**float(1/3))   # tambien encontre esta en internet y creo que tendria más sentido, y entre 2, 4, 5, etc.


import math

pi = math.pi
e = math.e
inf = math.inf
nan = math.nan
print(pi,e,inf,nan) # 3.141592653589793 2.718281828459045 inf nan

print(math.comb(6,2))  # 15
print(math.factorial(5)) # 120
print(math.prod([1,2,3,4,5,6])) # 720
print(math.log(9,3)) # 2
print(math.log2(8)) # 3
print(math.log10(100)) # 2


angle = 90

theta_radians = angle * 2 * math.pi / 360.0
theta = math.radians(angle)  # Convert angle x from degrees to radians.
# theta = math.degrees(angle)  # Convert angle x from radians to degrees.

print(math.sin(theta)) # 1
print(math.cos(theta)) # 0


Definition and Usage:
The math.sin() method returns the sine of a number.

Note: To find the sine of degrees, it must first be converted into radians with the math.radians() method (see example below).

# as in your calculator:
import math
print(math.sin(math.radians(90))) # 1
print(math.cos(math.radians(90))) # 0


# example of circunference:

f(x) = 0 +- sqrt(2 - (x - 3)**2)

import math
import matplotlib.pyplot as plt
import numpy as np

class Circunference:
    def __init__(self,center,radious):
        self.a, self.b = center
        self.a *= -1
        self.b *= -1
        self.r = radious
    def circunference(self,x):
        return self.b + math.sqrt(abs(self.r - (x + self.a)**2))

radious = math.sqrt(2)
Op = Circunference((3,0),2)
func = np.vectorize(Op.circunference)

dom = np.arange(3-radious,3+radious+0.001,0.001)
ran = func(dom)

plt.scatter(dom, ran, c='red')
plt.scatter(dom, -1*ran)
plt.show()

11--->> use time :
                              # para un ejecutable usaremos el " import time ".
import time
time.sleep(3)                 # donde "time.sleep(x) " es la funcion principal y "x" cuantos segundos de retraso queremos para finalizar algo o el programa.

# ejemplo cronometro : chronometer :

import time

date = int(input('enter minutes: ')) * 60

while date != 0:
        minutes = date // 60
        seconds = date % 60
        
        timer = "{:02d}:{:02d}".format(minutes, seconds)
        print(timer,end='\r')
        
        time.sleep(1)
        date -= 1
        
print('\r> FINISH TIME.')

# convert number to time:

def number_to_time(number):
        hours = number // 3600
        number = number % 3600
        minutes = number// 60
        seconds = number % 60
        return "{:02d}:{:02d}:{:02d}".format(hours,minutes,seconds)

print(number_to_time(125))


# other example:

def seconds_to_hours(seconds):
        h = seconds//3600
        aux = (seconds%3600)
        m = aux//60
        s = aux%60
        return '{:02d}:{:02d}:{:02d}'.format(h,m,s)
        
hour = seconds_to_hours(3735)
print(hour)

def hours_to_seconds(hour):
        h,m,s = map(int, hour.split(':'))
        seconds = h*3600 + m*60 + s
        return seconds

print(hours_to_seconds(hour))

import numpy as np
def hours_to_seconds_2(hour):
        matriz = np.array([[3600], [60], [1]]) # 3x1
        h,m,s = map(int, hour.split(':'))
        hour = np.array([[h, m, s]]) # 1x3
        return hour.dot(matriz) # 1x1

print(hours_to_seconds_2(hour))

12--->
                              # para crear modulos(funciones), debemos crear primero un .py para que cuando lo llamemos sea asi
import modulos_creados 
                              # despues llamamos a la funcion dentro de ese modulo
modulos_creados.suma_total(lista1)
                              # para no poner o escribir el indice del import usaremos
from modulos_creados import * 
                              # o solo 
from modulos_creados import suma_total 
                              # para algo especifico
                              # recuerda el modulo y el codigo o programa que este generando deben estar guardados en el mismo lugar 
13-->>

# para " CLASES Y OBJETOS " o para acostumbrarce " CLASS AND OBJECTS " ejemplos:

class Humano:
     especie = 'Humano'     # atributo publico en la clase, se puede llamar dentro(self.especie) y fuera de la clase(objeto.especie).
     __dni = 12345678       # atributo privado, solo se podra llamar dentro de la clase.
     def __init__(self,edad):
         self.edad=edad     # donde self viene a reflejar como un objeto a ingresar como el input ya veran más abajo y edad y self viene a ser como parametro y etc tú te entiendes.
         self.__nombre = input('ingresa tu nombre: ')  # atributo privado.
         print(f" hola esta es una clase {self.especie}, mi nombre es {self.__nombre}.")
     def hablar(self,mensaje):
         print(mensaje)

alexander = Humano(18)                # donde 18 se envia como parametro a la clase Humano() se esta guardando como plantilla en alexander(self)
print("tengo: ",alexander.edad)       # aqui manda a imprimir
alexander.hablar("hola gente")        # donde aqui mando a llamar a la funcion " hablar"
print(alexander.especie)  # output: 'Humano'
print(alexander.__dni) # saldria un error, ya que self.__dni es un atributo privado

# tambien puedo crear mas clases

class Dotero(Humano):                 # donde agregamos"(Humano)" para que esta nueva clase reconosca a "Humano" y no cree otro def __init__(self,edad):, y ya no mande a llarmar con " alexander = Humano(18) " sino con " alexander = Dotero(18) ".
      def poscicion(self,juego):
          print(" jugare poscicion: ",juego)
class Acleta(Humano):
      def actividad(self,ejercicio):
          print(" hoy día hare unas/nos: ",ejercicio)

alexander = Dotero(18)
alexander.poscicion(5)                # aqui llamamos a la funcion "poscicion(5)" y el 5 es el parametro que envia a la funcion que se encuentra en lña clase " class Dotero(Humano):".

gustavo = Acleta(15)                  # aquí llamamos a otra clase 
gustavo.actividad("planchitas")


# example 2 :  super() and super().__init__() :

class Vehiculo:
        def __init__(self, c, r):
                self.color = c
                self.ruedas = r
        def __str__(self):
                return 'Color: ' + self.color + ', Ruedas: ' + self.ruedas


class Coche(Vehiculo):
        def __init__(self, c,r,v, cl):
                super().__init__(c,r)
                self.velocidad = v
                self.cilindrada = cl
                
        def __str__(self):
                return super().__str__() + ", Velocidad: " + str(self.velocidad)  + ", Cilindrada: " + str(self.cilindrada)

class Camioneta(Coche):
        def __init__(self, c,r,v, cl, carga):
                super().__init__(c,r,v,cl)
                self.carga = carga
                
        def __str__(self):
                return super().__str__() + ", Carga: " + str(self.carga)

        
class Bicicleta(Vehiculo):
        def __init__(self, c,r,t):
                super().__init__(c,r)
                self.tipo = t
                
        def __str__(self):
                return super().__str__() + ", Tipo: " + self.tipo

class Motocicleta(Bicicleta):
        def __init__(self, c, r, t, v, cl):
                super().__init__(c,r,t)
                self.velocidad = v
                self.cilindrada = cl
                
        def __str__(self):
                return super().__str__() + ", Velocidad: " + str(self.velocidad) + ", Cilindrada: " + str(self.cilindrada)

        
def main():
    coche = Coche("azul", "cuatro", 140, 1200)
    bici = Bicicleta("roja", "dos", "urbana")
    camio = Camioneta("azul", "cuatro", 140, 1200, 500)
    moto = Motocicleta("roja", "dos", "urbana", 90, 600)
    
    print(coche)
    print(bici)
    print(camio)
    print(moto)
    
if __name__== "__main__":
    main()


14--->>> use with : use finally and try :

# example 1:

document = open('text.txt','r')
for line in document:
        print(line)
document.close()


# the previous is equivalent to:
# where you not need use "document.close()"
# it closes at finish the code block.
with open('test.txt','r') as document:
        for line in document:
                print(line)


# what the 'with' statement is doing:
document = open('text.txt','r')
try:
        for line in document:
                print(line)
finally:
        document.close()


15--->>> use exception, try, and finally : use error : raise :

# para validar int, o str, float, etc usaremos:

def vali():                                   # en este ejemplo validamos un entero o int.

    while True:                               # siempre estara activo porque nunca hay una contrdicion como un False y por eso tenemos el return para que cuando sea int devuelva eso y termine la funcion.
        palabra=input(" enter number: ")      # donde si lo ingresado es una "string o float" seguira hasta que sea un int y returne el valor "palabra=int(palabra).
        try:                                 
            palabra=int(palabra)              # try es para poder intentar o probar algo.
            return palabra                    # donde si la palabra puede ser int entonces returna el valor palabra.
        except ValueError:                    # el except es como caso contrario o excepto cuando y el ValuError es en caso que salga error en algo u en caso que el try no funcione hasta que salga el int.
            print(" el valor ingresado es incorrecto, digite entero.")
    
vali()


# create you own exception :

while True:
        try:
                int(input('you: '))  # you: a
        except Exception as e:     # 'except' recieve the error happened in 'try' which parameter is 'Exception' and it is saved in 'e', 
                print('Message Error by me: ',e)  # Message Error by me:  invalid literal for int() with base 10: 'a'

# use raise :

while True:
        try:
                error = input('enter your error: ')  # enter your error: HELLO GUYS
                raise Exception(error)    # send to 'Exception' as parameter 'error'.
        except Exception as e:
                print('Message Error by me: ',e)  # Message Error by me:  HELLO GUYS


# example with finally:

try:
        value = int(input('enter value: '))
except:
        print('the value doesnt a integer.')
        value = None
finally:
        print('you value is: ',value)

16----->>>>>

# para los textos y etc:

1. Convertir a mayúscula la primera letra
Método: capitalize()
Retorna: una copia de la cadena con la primera letra en mayúsculas.

>>> cadena = "bienvenido a mi aplicación" 
>>> print cadena.capitalize()
"Bienvenido a mi aplicación"

2. Convertir una cadena a minúsculas
Método: lower()

Retorna: una copia de la cadena en minúsculas.

>>> cadena = "Hola Mundo" 
>>> print cadena.lower()
"hola mundo"

3. Convertir una cadena a mayúsculas
Método: upper()

Retorna: una copia de la cadena en mayúsculas.

>>> cadena = "Hola Mundo" 
>>> print cadena.upper()
"HOLA MUNDO"

4. Convertir mayúsculas a minúsculas y viceversa
Método: swapcase()

Retorna: una copia de la cadena convertidas las mayúsculas en minúsculas y viceversa.

>>> cadena = "Hola Mundo" 
>>> print cadena.swapcase()
"hOLA mUNDO"

5. Convertir una cadena en Formato Título
Método: title()

Retorna: una copia de la cadena convertida.

>>> cadena = "hola mundo" 
>>> print cadena.title()
"Hola Mundo"

6. Centrar un texto
Método: center(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena centrada.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.center(50, "=") 
===========Bienvenido a mi aplicación============ 

>>> print cadena.center(50, " ") 
           Bienvenido a mi aplicación

7. Alinear texto a la izquierda
Método: ljust(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena alineada a la izquierda.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.ljust(50, "=")
Bienvenido a mi aplicación=======================

8. Alinear texto a la derecha
Método: rjust(longitud[, "caracter de relleno"])

Retorna: una copia de la cadena alineada a la derecha.

>>> cadena = "bienvenido a mi aplicación".capitalize() 
>>> print cadena.rjust(50, "=") 
=======================Bienvenido a mi aplicación

>>> print cadena.rjust(50, " ") 
                       Bienvenido a mi aplicación

9. Rellenar un texto anteponiendo ceros
Método: zfill(longitud)

Retorna: una copia de la cadena rellena con ceros a la izquierda hasta alcanzar la longitud final indicada.

>>> numero_factura = 1575 
>>> print str(numero_factura).zfill(12) 
000000001575

17--->>>>> class : private : methods and attributes :

# private elements could be called inside the class, but not outside the class.

class User:
    def __init__(self,username,password):
        self.username = username           # public attibute
        self.__password = password         # private attibute


    def hello(self):                         # public function
        return f' hello, im {self.username}.'

    def __show_password(self):               # private function
        return f' my password is: {self.__password}.'


im = User('python','cplusplus123')

print(im.username)  # python

print(im.__show_password())    # AttributeError: 'User' object has no attribute '__show_password'


18--->> ARCHIVOS : FILES : TXT :

#para almacenar datos en bloc de notas o notepad.
f=open("new.txt",'r')   # donde open("nombredelbloc.txt",'r') el 'r' es para leer el documento, 'w' para crear un nuevo documento y escribir, y 'a' para sobre escribir al final o como un append
f1=f.readlines()      # lee todas la lineas y readline() lee una solo linea
print(f1)   
a=input("enter something: ")
ga=a+"\n"             #para que se adapte a las lineas
if ga in f1:       
    print(True) 
else:
    print(False)
file=[1,2,3,4,5]
f=open("new.txt",'a')
f.write('file=% s'%file)   # seria normal un f.write("hola gente"), pero si es f.write("nombreparaagregar=%"%nombreparaagregar) es para q cual quier cosa sea numero, lista etc entre o sea agregado al bloc de notas.
f.close() # para cerrar el bloc
19--->>>
#para eliminar datos en un notepad usaremos el 'w' ya que crea uno nuevo.
f=open("archivo.txt",'w')
print(f.name)   # para ver el nombre del archivo
print(f.mode)   #para ver el modo del archiso si esta en 'a', 'w' o 'r'.
print(f.closed) #para ver si esta cerrado o abierto (True or False)
# para imprimir unas buenas lineas de un archivo txt debemos usar esto:
for linea in open("new.txt"):     #donde "linea" es el iterable, y "open("new.txt")" es lo que debe iterar que ya es un txt creado en la misma locacion del programa
    print(linea,end="")           #aqui imprime el iterable "linea" y en " end="" " es para que no de su salto de linea y siga linea por linea normal, ya que el los txt siempre al final de cada linea esta incluido un "\n".

// CON ESTO PUEDES LEER TODO EL ARCHIVO:

file = open("tabla_alex.txt","r")
print(file.read())
file.close()

//CON ESTO SACAS UNA LISTA DE TODO EL ARCHIVO CADA ELEMENTO DE LA LISTA ES UNA LINEA DEL ARCHIVO:

file = open("tabla_alex.txt","r")
print(file.readlines())
file.close()

// CON ESTO PUEDES VALIDAR CON EXCEPT EN CASO QUE NO SE ENCUENTRE EL ARCHIVO:

n = int(input('Introduce un número entero entre 1 y 10: '))
file_name = 'tabla-' + str(n) + '.txt'
try: 
    f = open(file_name, 'r')
except FileNotFoundError:
    print('No existe el fichero con la tabla del', n)
else:
    print(f.read())

//OTRA FORMA DE USAR EL OPEN :

with open("tabla_alex.txt","r") as file: # este no tiene necesidad de usar '.close()'.
       print(file.readlines())

// UnicodeDecodeError ERROR !!!!

file = open('review.txt','r',encoding='utf-8')
#text = file.read()
#text = file.readlines()
#text = file.readline()
#print(text)


20--->>> USE map : filter : reduce :

### 1.list(map(funcion,parametros)) # bien para iterar colecciones.

# example 1:

def myfunc(a, b):
        return a + b

x = list(map(myfunc, ('apple', 'banana', 'cherry'), ('orange', 'lemon', 'pineapple')))
print (x)

# output: ['appleorange', 'bananalemon', 'cherrypineapple']


# example 2:

def number_to_time(number):
        hours = number // 3600
        number = number % 3600
        minutes = number// 60
        seconds = number % 60
        return "{:02d}:{:02d}:{:02d}".format(hours,minutes,seconds)

numbers = [125, 7243, 72, 991, 11207, 6]
time = list(map(number_to_time, numbers))
print(time)

# output: ['00:02:05', '02:00:43', '00:01:12', '00:16:31', '03:06:47', '00:00:06']


### 2.list(filter(funcion,parametros)) #igual que map pero esta tiene una condiccion con elementos filtrados


# example 1:

def multiplo_5(numero):
        if numero % 5 == 0:
                return True
        
numeros = [2, 5, 10, 23, 50, 33]

x = list(filter(multiplo_5, numeros))
print(x)

# output: [5, 10, 50]

# example 2:

names = ['Carlos', 'David', 'Alexander', 'Fernando', 'Amelia']

request = list(filter(lambda x: x[0].lower() == 'a', names))
print(request)

# output: ['Alexander', 'Amelia']


### 3. reduce(funcion, colección, inicial)

# example 1:

from functools import reduce
def add(a, b):
        return a + b

print(reduce(add, [1, 2, 3, 4, 5]))

output : 15

# example 2:

from functools import reduce
def concatenate(a, b):
        return a + b

print(reduce(concatenate, ['a', 'b', 'c', 'd', 'e']))

# output: 'abcde'


### 4.funcion lambda como un def pero menos especifico

# example 1:

doblar = lambda num: num*2
print(doblar(2)) # 2**2 = 4

# example 2:

a=[1,2,3,4,5,6,7,8,9,10]
res=list(filter(lambda x: x % 3 == 0, a))
print(res)

# output: [3, 6, 9]

21--->> para crear interfaces graficas o GUI

#eval es un operador que me permite evaluar un signo en un string
from tkinter import Tk  

ventana =Tk()
ventana.title("hola")
ventana.mainloop()
#con esto nos saldra una pequeña ventana

22--->>> use break : use continue :

#use break and continue, break rompe la iteracion de un for o while 
#Al aparecer un Continue en Python, este regresa al comienzo del bucle, 
#ignorando todos los estamentos que quedan en la iteración actual del 
#bucle e inicia la siguiente iteración. Queda más claro con un ejemplo:

for letra in "Python":
    if letra == "h":
        continue
    print ("Letra actual : " + letra)

# Primer ejemplo
var = 10
while var > 0:
    var = var -1
    if var == 5:
        continue
    print ("Valor actual de la variable : " + str(var))

>>>pantallla

Letra actual : P
Letra actual : y
Letra actual : t
Letra actual : o
Letra actual : n

Valor actual de la variable : 9
Valor actual de la variable : 8
Valor actual de la variable : 7
Valor actual de la variable : 6
Valor actual de la variable : 4
Valor actual de la variable : 3
Valor actual de la variable : 2
Valor actual de la variable : 1
Valor actual de la variable : 0

# example 2:
for i in range(1,6):
        if i ==3:
                continue
        print(i)

# output:
1
2
4
5


# break:

for i in range(1,6):
        if i ==3:
                break
        print(i)

# output:
1
2


# anidamiento con break:
def aea():
        cade = 'abcdef'
        for i in range(3):
                print(i)
                for j in cade:
                        print(j)
                        break

aea()

# output:
0
a
1
a
2
a

23 ------->>> use split : split chars or strings : 

#use palabra.split()

>>> c = " Una cadena con espacios "
>>> c.split()
['Una', 'cadena', 'con', 'espacios']

x = ?blue,red,green?
x.split(?,?)
 
[?blue?, ?red?, ?green?]
>>>
 
>>> a,b,c = x.split(?,?)
 
>>> a
?blue?
 
>>> b 
?red?
 
>>> c
?green?

#use "que quieres que haya en los espacios(","or"@"or"$"or stuff ramdon)".join(el_conunto_a_unir)

>>> xs = ['aaa', 'bbb', 'cccc']
>>> " ".join(xs)
'aaa bbb cccc'
>>> ", ".join(xs)
'aaa, bbb, cccc'
>>> "@@".join(xs)
'aaa@@bbb@@cccc'

## Si es una cadena pegada e.g: 'abcd', para separarla simplemente usaremos:

characters = list('0123456789abcdefghijklmnopqrstuvwxyz')

# Salida: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

24-->>
para generar un password sin vita del usuario usamos:
import getpass
f=getpass.getpass(prompt="enter password: ")
25---->
# Ejercicio 1
# podremos comprimir asi d facil solo mira y con el print(f"que imprime todo lo q este dentro de la llave usando la f al inicio {mensaje_a_imprimir}")
def cantidad(a):
    facto=1
    for i in range(1,a+1):facto=facto*i
    print(f"the number permutations of {a} elements is: {facto}")
cantidad(int(input("enter number of elements: ")))
# tambien puedes comprimir un modulo 
# ejemplo:
--->> from math import factorial as f
26---->>>>
#f.seek(posicion en la que quieres empezar) lleva al puntero a la posicion dada
#f.tell() = imprime la posicion actual del puntero.
f=open("hola.txt",'r')  
f.seek(5)              #posicion dada "5"
cadena=f.read(5) 
print(cadena)
print(f.tell())       #imprime la poscion actual del puntero osea "5"

27------>> SQLITE : sqlite3 :

#para establecar una coneccion con sqlite3 usaremos:

varible_a_guardar=sqlite3.connect("archivo_a_crear.db")
#establecemos un cursor

c=varible_a_guardar.cursor()

c.execute('''CREATE TABLE GAMES
             (NAMEGAME text, EDITION text, COMPANY text, VOL real, PRICE real)''')

c.execute("INSERT INTO GAMES VALUES ('INFINITY','ESPECIAL','AMAZON',3,149.99)")

conn.commit()
#"commnit()" guarda los cambios

ingrese=[('MINECRAFT','NORMALY','JAVA',40,49.99),
              ('DESTINY','PREMIUN','SONY',170,199.99)]
c.executemany("DELETE INTO GAMES VALUES (?,?,?,?,?)",ingrese)
#"executemany()" sirve para enviar varios parametros a guardar en sqlite3
conn.commit()

c.close()

# other example :

import sqlite3
cur=sqlite3.connect(":memory:")
c=cur.cursor()

c.execute('''CREATE TABLE tienda
             (cliente text, comprador text, producto text, venta real)''')


purchases = [('Cisco', 'juan', 'pc', 5000),
             ('Microsoft', 'pep', 'mouse', 80),
             ('Apple', 'delia', 'teclado', 100),
             ('Mac', 'pepa', 'placa i3', 700),
             ('Os', 'inosuke', 'monitor', 100),
            ]
c.executemany('INSERT INTO tienda VALUES (?,?,?,?)', purchases)

cur.commit()
for row in c.execute('SELECT cliente FROM tienda ORDER BY cliente'):
        print(row)
cade="total"
print(cade.center(60,"="))       
for row in c.execute('SELECT * FROM tienda ORDER BY cliente'):
        print(row)

cur.close()

28---->

para comentarios usaremos:
alf + 3 para volverlos a todos asi -->> ###print("hola")
y para retornarlos usaremos alf +4 --->> print("hola")

29--->
para añadir a un diccionario usaremos:
dic['alex']=18
para eliminar usaremos:
del dic['alex']
#para imprimir diccionarios con bucle for clave y valor:

vali=open("character.pickle",'rb')
g=pickle.load(vali)
for clave, valor in g.items():
    print(f"{clave} --> {valor}")

30--------------->>>>>>>>>>>>>>>

import sqlite3
conn=sqlite3.connect(":memory:") #en vez de :memory: puede ir el documento o base de datos nombre_del_documento.db
c=conn.cursor()
c.execute("CREATE TABLE shop(client text, product text, price real)")

c.execute("INSERT INTO shop VALUES('marco','milk',10.5)") #insetar o ingresar dados individualmente.
purchases=[("alex","bread",2.50),     
           ("jesudas","soda",5.50)]
c.executemany("INSERT INTO shop VALUES(?,?,?)",purchases) #ingresar mediante una lista o etc.
conn.commit() #guardado del proceso


c.execute("SELECT * FROM shop ORDER BY client") # para selecionar q imprimir
print(c.fetchone())#llama al primer registro
print(c.fetchall())#llama a todos los registros

conn.close()
###### para borrar una tabla se usa "DROP TABLE shop" y ALTER TABLE nombre_tabla DROP columna_a_eliminar
######para introducir una tabla extra se usa ALTER:
ALTER TABLE shop
ADD COLUMN nicks text

# tambien para cambiar d nombre

ALTER TABLE shop
RENAME TO mall
#####tambien para actualizar una tabla UPDATE
UPDATE comments
SET email = 'zyx@email.com'
WHERE name = 'Shivam Mamgain';

#el like
donde se usaria
WHERE name LIKE '%A%' #esto absorvera a el name que tenga una a, en caso contrario no lo contara.
#para ordernar ascendentemente o descendentemente. 
SELECT
   select_list
FROM
   table
ORDER BY
    column_1 ASC,
    column_2 DESC;
#####recuerda cuando vas a ingresar datos en un "bla_bla.execute" debe estar en [] o () para q entre ingresado anteriormente.
#### PARA IMPRIMIR LAS TABLAS USAR: c.execute("SELECT * FROM sqlite_master WHERE type = 'table' ")
##c.execute(f"ALTER TABLE {table} ADD COLUMN day text") para agregar columnas.

31----->
#para eliminar columnas usaremos esto:
c.execute("BEGIN TRANSACTION")
c.execute("CREATE TEMPORARY TABLE t_pasar (code,product,price,realprice)")
c.execute("INSERT INTO t_pasar SELECT code,product,price,realprice FROM shop")
c.execute("DROP TABLE shop")
c.execute("CREATE TABLE shop (code,product,price,realprice)")
c.execute("INSERT INTO shop SELECT code,product,price,realprice FROM t_pasar")
c.execute("DROP TABLE t_pasar")
con.commit()
con.close()

32----->> use string : import string

##para usar más en letras o strings:
import string
usando los comandos q contiene string podremos sacar
todos los numeros, tolas las letras mayusculas o minuscula, cambiar a cada letra mayuscula en cada palabra al iniciar, etc.

import string

print(string.ascii_letters) # abc....yzABC...YZ
print(string.ascii_lowercase) # abc...yz
print(string.ascii_uppercase) # ABC...YZ
print(string.digits) # 0123...9
print(string.hexdigits) # 0123456789abcdefABCDEF # hexagesimal
print(string.octdigits) # 01234567
print(string.printable) # 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
print(string.punctuation) # !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
print(string.whitespace) # rectangulo vertical y fecha para arriba

33------>>>> ASSERT : assert : asserts :

assert(1==2) # Se lanza la excepción AssertionError.
assert(1==1) # no lanza nada.

assert 'a'=='A', "El assert falló"
assert False, "El assert falló"

# the ago is equivalent to:
if condicion:
    raise AssertionError()


# example 1:
def calcula_media(lista):
    return sum(lista)/len(lista)

assert(calcula_media([5, 10, 7.5]) == 7.5) # ok
assert(calcula_media([4, 8]) == 6) # ok


# example 2:
def suma(a, b):
    assert(type(a) == int)
    assert(type(b) == int)
    return a+b

# Ok, los argumentos son int
suma(3, 5)

# Error, ya que las variables no son int
suma(3.0, 5.0)

34 ------->>>> OPEN txt :

recuerda que cuano esta en una funcion un open es más efectivo a la hora de cambiar cosas al instante: ejemplo (bot_mirrow_future_XD) :

f = open("botspeak.txt",'w')
f.write("hola\nno lo sé tú dime\nsi eso\nperro lo tienes\n")
f.close()
def add(a):
    f = open("botspeak.txt",'a')
    f.write(a+"\n")
    
fat=open("botspeak.txt",'r')
while(1):
    speak=input(" you: ")
    add(speak)
    val=fat.readline()
    print(f"\n zorro:  {val}")
    if val=="adios\n":
        f = open("botspeak.txt",'w')
        f.close()
        break
    
fat.close()

35 ----------->>> USO DE ITERTOOLS :
import itertools

---VARIACIONES - PERMUTACIONES : MODIFICA EL ORDEN DE LOS ELEMENTOS.(SÍ IMPORTA EL ORDEN). DATO:[2,6,13] SALIDA: [2,6,13], [2,13,6], [6,2,13], [6,13,2], [13,2,6], [13,6,2].
itertools.permutations(iterable,longitud)

--VARIACIONES - PERMUTACIONES CON REPETICIONES:
itertools.product([1,2,3,4], repeat=2)

---COMBINATIONS : COMBINA TODOS LOS ELEMENTOS, NO SE REPITEN CONJUNTOS.(NO IMPORTA EL ORDEN). DATO:[2,6,13] SALIDA: [2,6], [2,13], [6,13].
itertools.combinations(iterable,longitud)

--COMBINACIONES CON REPETICIONES:
itertools.combinations_with_replacement([1, 2, 3, 4, 5, 6], 2)


# without package:

# permutations with repetitions : variations with repetitions :

def permutations_with_repetitions(lista, n): # len(lista)^n
    output = [[]]
    
    for nothing in range(n):
        aux = []
        for sub_out in output:
            for i in lista:
                aux.append(sub_out + [i]) # [[3] + [1]] => [[3,1]]
        output = aux
        
    return output

print(permutations_with_repetitions(['a','b'], 3))


# potencia de un conjunto : P(A) : 

def potencia(c):
    if len(c) == 0:
        return [[]]
    r = potencia(c[:-1])
    return r + [s + [c[-1]] for s in r]

A = [1,2,3]
        
print(potencia(A.copy())) # len(...) = 2^len(A) = 8


36 ------------------------->>> CLASES - ENCAPSULAMIENTO - HERENCIA - POLIMORFISMO :


CLASE : CUANDO CLASIFICAMOS UN OBJETO EJEMPLO : CUANDO VEMOS UN PERRO SABEMOS QUE ES UN PERRO ASI QUE DECIMOS ES UN PERRO O SEA LA CLASE PERRO SEA LA DEL CUALQUIER RAZA.
// EN GENERAL UNA CLASE ES COMO UN PLANO.

ENCAPSULAMIENTO : ES UN PRIVATE O CUANDO HACEMOS ELEMENTOS UNICOS DE ESTA CLASE Y NO PUEDEN SER TOCADOS POR OTRAS

HERENCIA : CUANDO ADQUIRIMOS TANTO LOS ATRIBUTOS Y METODOS DE LA CLASE ES ESTE EJEMPLO SE VE LA FUNCION "esta_vivo()".

POLIMORFISMO : CUANDO SE LLAMA A UN METODO O ATRIBUTO PERO CADA CLASE VARIA ES SU USO O LO QUE HARA EJEMPLO : TENEMOS LA FUNCION "COMER()" CADA CLASE HACE ALGO DIFERENTE.

EJEMPLO 1 : 

class Ser_vivo:   		// CLASE
    vivo = " be life"            //ATRIBUTO TIPO STRING O CADENA
    def __init__(self):
        pass
    def comer(self):              
        print("eating.")
        
class Persona(Ser_vivo):             	// HERENCIA
    def __init__(self):
        self.__name = "alex"
    def comer(self):                      // POLIMORFISMO
        print("eating sitdown.")
    def get_name(self):               	// USO DEL GET Y SET 
        return self.__name
    def set_name(self,dato):
        self.__name = dato

class Dog(Ser_vivo): 
    def __init__(self):
        pass
    def comer(self):
        print("eating in its glass.")
        
yo = Persona()     		// CREACION DE OBJETOS HIJAS DE LA CLASE "Ser_vivo".
mascota = Dog()

yo.comer()               	// POLIMORFISMO
print(yo.vivo)              	// HERENCIA
print(yo.get_name())
yo.set_name("alexander")        	// USO GET & SET
print("new name: ",yo.get_name()) 

mascota.comer()                	// POLIFORMISMO
print(mascota.vivo)            	// HERENCIA

36.1 -------- USO DEL SUPER().__INIT__ :  SUPER () . __INIT__ :

//LA FUNCION SUPER() PERMITE QUE EL ESTADO DE __INIT__ DE LA CLASE PADRE SE EJECUTE, SI NO SE PONE ESO SOLO SE EJECUTARA EL ESTADO DE LA CLASE LLAMADA O HIJA.

class clase1:                  //PADRE
    def __init__(self,name,age):
	   self.name = name
	   self.age = age
           print("hello i am class1")
class clase2(clase1):          //HIJA
       def __init__(self,name,age,color):          
              super().__init__(name,age)         //LLAMA AL ESTADO __INIT__() DE SU PADRE QUE ES "clase1"  Y ENVIA LOS PARAMETROS  DE SU CONTRUCTOR
              print("adios i am class2")
	      self.color = color

yo = clase2()

//RECUERDA QUE SOLO LLAMA A SU PADRE NO AL ABUELO, SI QUEREMOS LLAMAR AL ABUELO DEBEMOS HACER LO MISMO EN LA CLASE PADRE.

36.2 ---------------------->>> CLASSMETHOD : STATICMETHOD : PROPERTY : ATTRIBUT.SETTER

//CLASSMETHOD : puede usar las instancias de la clase (atributos, metodos).
//STATICMETHOD : no puede usar (atributos, metodos) de la clase, esta por si sola en la clase, como una funcion más.

class Poblacion:
       people  = 100     // ATRIBUTOS
       
       @class 
       def quantity_of_people(cls):
              cls.decorador()
              return cls.people
       
       @classmethod
       def increase_quantity(cls):
              cls.people += 1
              
       @classmethod 
       def decorador(cls):           // METODOS
              print("resultado: ",end="")

print(Poblacion.quantity_of_people())  # resultado: 100
Poblacion.increase_quantity()
print(Poblacion.quantity_of_people())  # resultado: 101


class Math:              
       @staticmethod
       def pow(dato_1, dato_2):
              return pow(dato_1,dato_2)
       
       @staticmethod
       def factorial(dato):
              valor = 1
              for i in range(1,dato+1):
                     valor *= i
              return valor
                     
 
print(Math.pow(5,3))  # 125
print(Math.factorial(5)) # 120


## gets and sets:

class People:
        def __init__(self,name,age,sex):
                self.__name = name
                self.__age = age
                self.__sex = sex

        @property
        def Name(self):
                return self.__name
        
        @Name.setter
        def Name(self, name):
                self.__name = name
                
        @staticmethod
        def greetings(name):
                print('Hi, im ',name)

        
he = People('Pedro',19,'M')
print(he.Name)

he.Name = 'Claudio'
print(he.Name)

People.greetings(he.Name)

# OUTPUT:
 
Pedro
Claudio
Hi, im  Claudio

# EXAMPLE OF STATIC AND RETURN OTHER CLASSES:

class Fish:
        def __init__(self):
                self.animal = 'fish'
        def go(self):
                print(' Im a fish, i love the water and sun.')

class Bird:
        def __init__(self):
                self.animal = 'bird'
        def go(self):
                print(' The air is strong today, im air´s rat.')

class Specie:
        def __init__(self, animal):
                self.animal = animal
        
        @staticmethod
        def classify(animal):
                animal = animal.lower()
                if animal == 'fish':
                        return Fish()
                elif animal == 'bird':
                        return Bird()
                else:
                        return Specie(animal)
                
        def go(self):
                print(f' Not exist the animal: {self.animal}')
                

obj = Specie.classify('Fish')
obj.go()

obj = Specie.classify('BIRD')
obj.go()

obj = Specie.classify('GODZILLA')
obj.go()

# OUTPUT:

'''
 Im a fish, i love the water and sun.
 The air is strong today, im air´s rat.
 Not exist the animal: godzilla
'''

37 ------------------------>>> USO DEL MAP :

MAP() : ITERA A CADA VALOR ENVIADO POR UNA FUNCION, PRIMERO VA LA FUNCION DESPUES EL ELEMENTO A ITERAR: (FUNCION, ITERACION(LIST,DIC,TUPLE,ETC)).

def grade(score):
    if score < 5:
        return 'SS'
    elif score < 7:
        return 'AP'
    elif score < 9:
        return 'NT'
    elif score < 10:
        return 'SB'
    else:
        return 'MH'

def apply_grade(scores):
    subjects = map(str.upper, scores.keys())
    grades = map(grade, scores.values())
    return dict(zip(subjects, grades))

print(apply_grade({'Matemáticas':6.5, 'Física':5, 'Química':3.4, 'Economía':8.2, 'Historia':9.7, 'Programación':10}))

38 ---------------->>>>>>  FILTER : USO DE FILTER :

//EXTRAE LOS ELEMENTOS QUE CUMPLAN EL REQUISITO DE LA FUNCIONEN CASO QUE SEAN VERDADEROS:
// O SEA SI EN LA LISTA EL PRIMERO ES TRUE Y LOS DEMAS FALSE ENTONCES RETORNA UNA LISTA CON EL ELEMENTO TRUE QUE ES EL PRIMERO.

>>> l = [5,10,73,25,52]
>>> print(list(filter(lambda n:n%5==0, l)))

SALIDA : [5, 10, 25]

39 ------------------->>>>  USO DE NUMPY or NP: use numpy :

import numpy as np

arreglo = np.zeros([3,5,4])   // genera una marizz replea de zeros o 0. 3 = canidad de marizes, 5 = filas, 4 = columnas.

arreglo = np.ones([4,5,3])   	//genera una mariz replea de unos o 1. 4 = arreglos, 5 = filas, 3 = columnas.
print("\nejemplo 1:\n",arreglo)

arreglo = np.arange(10)        // genera desde el 0 al 9 un array.
print("\nejemplo 2:\n",arreglo)

arreglo = np.arange(5,10)      // desde 5 hasta 9, siempre el limite es -1. (limite 10 = 10-1 = 9)
print("\nejemplo 3:\n",arreglo)

arreglo = np.arange(2,3,0.1)   // desde 2, hasta 3, con paso de 0.1. 
print("\nejemplo 4:\n",arreglo)

# arange with rows and columns:
>>> x = np.arange(30).reshape((3,10))   # generate a array with 30 elements since 0, and reshape with 3 rows and 10 columns.
>>> x
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]])

arreglo = np.linspace(1.,4.,6)   // genera un array de "6" valores entre "1." hasta "4.".
print("\nejemplo 5:\n",arreglo)

arreglo = np.full((2,3), 5)      // 2 = filas, 3 = columnas, 5 = el valor que va a ver en todos los arrays.
print("\nejemplo 6:\n",arreglo)

arreglo = np.eye(5)    // genera una mariz identidad, "5" es el numero de columnas  filas o sea una martriz de 5x5.
print("\nejemplo 7:\n",arreglo)

// tambien se podria usar: "array = np.identity(5)" donde 5 es una matriz de 5x5.

arreglo = np.random.random((4,5))   // 4 = filas, 5 = columnas.
print("\nejemplo 8:\n",arreglo)
arr = np.random.randint(0,255,size=3) # np.array([25,240,128])

arreglo = np.empty((3,5))  //genera una  martriz vacia de ceros. 3 = filas, 5 = columnas.

a = np.array([(1,2,3),(4,5,6)])
print(a.ndim)       # resulado "2"  porque el array evaluado es bidimensional.

a = np.array([(1,2,3)])
print(a.dtype)       # imprime el tipo de dato, en este caso es "int64".

a = np.array([(1,2,3,4,5,6)])
print(a.size)    # 6, retorna el tamaño del array.
print(a.shape)   # (1,6)   retorna la forma del array.


# array operation:

import numpy as np
from math import e
import matplotlib.pyplot as plt
>>> x = np.arange(-10,11) # dom(x) = [-10,10]
>>> y = e**x
>>> plt.plot(x,y)
>>> plt.show()

----
a = np.array([(1,2,3),(4,5,6)])   # matriz de 2 filas por 3 columnas.
print(a)

[ [1,2,3]
[4,5,6] ]

a = a.reshape(3,2)  # se cambio a una matriz de 3 filas  2 columnas.
print(a)

[ [1,2]
[3,4]
[5,6] ]
----
a = np.array([(1,2,3),(4,5,6)])   
print(a[0,2])   # imprime "3".

a = np.array([(1,2,3),(4,5,6)])   
print(a[0:,2])   # imprime "[3,6]". # "[0:" = desde el array 0 hasa el final, y ", 2]" obtener el elemento en la posicion 2.

a = np.array([(1,2,3),(4,5,6)])   # se puede usar con array o matrices.
print(a.min())   # imprime "1".
print(a.max())   # imprime "6".
print(a.sum())   # imprime "21".

a = np.array([(1,2,3),(4,5,6)])   
print(np.sqrt(a))   # imprime la raiz de cada elemento.
print(np.std(a))    # imprime la desviacion estandar (La desviación estándar es la medida de dispersión más común, que indica qué tan dispersos están los datos con respecto a la media)
# la desviacion standar viene a ser el _Delta de X.

print(np.mean(a))  # la media del array, matriz etc.
x = np.array([[1], [4]])
np.mean(x, axis=0) # [2.5] => 1 + 4 / 2 # sum all rows by each column
np.mean(x, axis=1) # [[1.0], [4.0]] => 1 / 1, 4 / 1 # sum all columns of each row.

x = np.array([[1], [4]])
np.mean(x, axis=0, keepdims=True) # [[2.5]] 

x = np.array([(1,2,3),(4,5,6)])  
y = np.array([(1,2,3),(4,5,6)])
print(x+y) # imprimira una matriz, suma, resta, producto, y division.
print(x-y)
print(x*y)
print(x/y)

X = np.random.permutation(X)  # genera un roden aleatorio de los elementos del array enviado.

mu = np.mean(X,axis=0) # X es un arreglo o matriz, AL PONER AXIS = 0 NOS RETORNARA UN ARRAY DE LA MEDIA DE CADA COLUMNA.
std = np.std(X,axis=0)


# conditionals:

>>> std[ std == 0 ] = 1 # COMO UN MINI CONDICIONAL. si elemento[x] es == 0 entonces elemento[x] = 1 etcetcetc.


>>> X, Y = make_circles(n_samples=n_samples, factor=0.5, noise=0.05)
>>> print('samples and n inputs: ',X.shape)
(500,2)
>>> print(Y.shape)
(500,)
>>> Y = Y[:, np.newaxis] 
>>> print(Y.shape)
(500,1)

>>> plt.scatter(X[Y[:, 0] == 0,0], X[Y[:, 0] == 0,1], c = 'blue') # when Y the first colunm in all rows is equals to 0, then we'll get only the rows in X when Y is fulfilled.
>>> plt.scatter(X[Y[:, 0] == 1,0], X[Y[:, 0] == 1,1], c = 'red')
>>> plt.show()


>>> train[train[:,0] == 1] # get array when the first column(index:0) is equals to 1.


# sum np:

a = np.array([(1,2,3),(4,5,6)])
print(np.sum(a))  # imprime 21, suma todos los elementos del arreglo o matriz.


# new axis : np.newaxis :

x = np.array([1,2,3]) # shape = (3,) # that is to say, a array with 3 columns
x = x[:, np.newaxis] # add new axis to array
x.shape # (3,1) # now this array is a matrix that have 3 rows and 1 colunm, R3x1
x = x[:, np.newaxis] 
x.shape # (3,1,1) # now this matrix is a tensor with 3 matrix  with 1 row and 1 colunm, R3x1x1

dists = np.sum(np.power(X_test[:, np.newaxis] - X_train,2),axis=2)

# se usa el axis 2, para entrar al 3 array. [ [ [3],[3] ],[ [3], [3] ] ]

a = np.arange(6).reshape(2,3) + 10
a
array([[10, 11, 12],
       [13, 14, 15]])

np.argmin(a)
0

np.argmin(a, axis=0)
array([0, 0, 0])

np.argmin(a, axis=1)
array([0, 0])


result = np.where(arr == 15)   #encontrar el indice de un array o matriz
 
print('Tuple of arrays returned : ', result)
print("Elements with value 15 exists at following indices", result[0], sep='\n')

#salida:
Tuple of arrays returned :  (array([ 4,  7, 11], dtype=int32),)
Elements with value 15 exists at following indices
[ 4  7 11]

#CONCATENAR O UNIR 2 ARRAY O MATRICES:
A = np.array([([1,2],[3,5]]))
B = np.array(([5,6]))

np.concatenate((A, B))

matrix([[ 1.,  2.],
        [ 3.,  4.],
        [ 5.,  6.]])

#contador o de lementos: 

d = np.random.randint(0, 5, 20)
[4 0 3 3 3 1 3 2 4 0 0 4 2 1 0 1 1 0 1 4]

print(np.bincount(d))
[5 5 2 4 4]

#ordenamiento de arreglos o matrices:
c = np.array([2.5, 3.2, 4.3, 0., 8.7, 0.])

print(np.sort(c))  # [0.  0.  2.5 3.2 4.3 8.7]
print(np.argsort(c)) # [3 5 0 1 2 4]     # los indices de los elementos ordenados.

# np.dot(array) # multiplica matrices solo si sus dimensiones son validas.

#SALIDA :

ejemplo 1:

 [[[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]

 [[1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]
  [1. 1. 1.]]]

ejemplo 2:
 [0 1 2 3 4 5 6 7 8 9]

ejemplo 3:
 [5 6 7 8 9]

ejemplo 4:
 [2.  2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9]

ejemplo 5:
 [1.  1.6 2.2 2.8 3.4 4. ]

ejemplo 6:
 [[5 5 5]
 [5 5 5]]

ejemplo 7:
 [[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]

ejemplo 8:
 [[0.54600486 0.73706976 0.85524028 0.89200753 0.25364417]
 [0.35571309 0.02002548 0.1081764  0.27915285 0.47872488]
 [0.49900018 0.03077063 0.57523311 0.59013634 0.80158343]
 [0.65366827 0.09053311 0.30189149 0.79028571 0.94809943]]


import numpy as np # DATOS CON CABECERA, y ORDENAR CON SEGUN ETIQUETA DE CABECERA
cabecera = [('nombre','S10'),('edad',int)]
datos = [('juan',19),('felipe',23),('luis',16),('thiago',18)]

users = np.array(datos, dtype=cabecera)

np.sort(users, order = 'edad')

#salida: 

array([(b'luis', 16), (b'thiago', 18), (b'juan', 19), (b'felipe', 23)],
      dtype=[('nombre', 'S10'), ('edad', '<i8')])

# MATRIZ CON DIAGONAL DEFINIDA:
import numpy as np
arr = np.diag([1,2,3,4,5])
print(arr)

#salida: 

[[1 0 0 0 0]
 [0 2 0 0 0]
 [0 0 3 0 0]
 [0 0 0 4 0]
 [0 0 0 0 5]]

# Use Where:

import numpy as np

A = np.random.random((3,3))
A = np.where(A > 0.5, 1, 0)
print(A)

# np.linalg. etc:

funciones de algebra linear.

# MESHGRID:

import numpy as np
x, y = np.arange(-5,6,1), np.arange(-3,4,1)
combination = np.meshgrid(x,y)
print(combination)

# output: 

[array([[-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5],
        [-5, -4, -3, -2, -1,  0,  1,  2,  3,  4,  5]]),
 array([[-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3],
        [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
        [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
        [ 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
        [ 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3]])]

# matrix invocation:

import numpy as np
arr = np.array([[0,-1], [1, 0]])
matrix1 = np.matrix(arr)

matrix2 = np.matrix('0 -1; 1 0')

matrix3 = np.matrix('0 ,-1; 1 ,0')

print(matrix1)
print(matrix2)
print(matrix3)

# output:
'''
[[ 0 -1]
 [ 1  0]]
[[ 0 -1]
 [ 1  0]]
[[ 0 -1]
 [ 1  0]]
'''

# agregar y quitar items a un array:
# more:https://www.analyticslane.com/2019/11/27/numpy-basico-como-anadir-elementos-en-arrays-de-numpy-con-np-append/#:~:text=append()%20es%20uno%20de,append()%20.

import numpy as np
a = np.array([1,2,3,4,5])
b = np.array([1,2,3,4,5])

a = np.append(a, [6], axis=0) # agregar
b = np.append(b, [6], axis=0)

a = a[:-1]  # quitar
b = b[:-1]

val = a + b

print(val)

# equivalent

import numpy as np
a = np.array([1,2,3,4,5])
b = np.array([1,2,3,4,5])

a = np.append(a, 6, axis=None)
b = np.append(b, 6, axis=None)

a = a[:-1]
b = b[:-1]
val = a + b
print(val)


# sin and cos:

np.cos(np.radians(45)) # cos in radians
np.sin(np.radians(45))

# arr.flatten():

a = np.array([[0,1],[2,3]]) # 2x2
print(a.flatten()) # [0,1,2,3] # 4x1

# map or functions in numpy : use vectorize :

import numpy as np
x = np.array([1, 2, 3, 4, 5])
squarer = lambda t: t ** 2
vfunc = np.vectorize(squarer)
print(vfunc(x)) # Output : array([ 1,  4,  9, 16, 25])

import numpy as np
x = np.array([1, 2, 3, 4, 5])
def squarer_and_sum(x):
	return (x ** 2) + 1
vfunc = np.vectorize(squarer_and_sum)
print(vfunc(x)) # Output : array([ 2,  5,  10, 17, 27])


# int0 equals to int 64:

>>> arr = np.int0([1, 2, 3])
>>> arr.nbytes
24

>>> import numpy
>>> numpy.int0 is numpy.int64
True


# flatten and ravel:

x = np.array([[1, 2, 3], [4, 5, 6]])
np.ravel(x)
array([1, 2, 3, 4, 5, 6])

a = np.array([[1,2], [3,4]])
a.flatten()
array([1, 2, 3, 4])


# 2 iters, 1 iter, and map:

func = lambda th: np.sin(1/2 * th[0]**2 - 1/4 * th[1]**2 + 3) * np.cos(2 * th[0] + 1 - np.e**th[1])

size = 100

_x = np.linspace(-2, 2, size)
_y = np.linspace(-2, 2, size)

# two
_z = np.zeros((size,size))

for i in range(_x.shape[0]):
  for j in range(_x.shape[0]):
    _z[i,j] = func([_x[i],_y[j]])
_z


# one
_z = np.zeros((size,size))
for i in range(_x.shape[0]):
  _z[i] = func([_x[i],_y])
_z


# map
_z = np.zeros((size,size))
_z = np.array(list(map(lambda x: func([x,_y]), _x)))
_z


# asignate values in subsets :

>>> z = np.zeros((3,10))
>>> z
array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

>>> z[0,[1,2,3]] = 1
>>> z
array([[0., 1., 1., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

## example 2:

import numpy as np

def vectorize_sequences(sequences, dimension=10000):
  results = np.zeros((len(sequences), dimension)) 	# shape: (x_rows, 10 000)
  for i, sequence in enumerate(sequences):
    results[i, sequence] = 1.    # asignate "1." float to subset as the previous example.
  return results
  
x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

>>>


# changue the stype :

https://stackoverflow.com/questions/29245848/what-are-all-the-dtypes-that-pandas-recognizes

numpy.generic,
numpy.number,
numpy.integer,
numpy.signedinteger,
numpy.int8,
numpy.int16,
numpy.int32,
numpy.int64,
numpy.int64,
numpy.timedelta64]],
numpy.unsignedinteger,
numpy.uint8,
numpy.uint16,
numpy.uint32,
numpy.uint64,
numpy.uint64,
numpy.inexact,
numpy.floating,
numpy.float16, 
numpy.float32, 
numpy.float64, 
numpy.float128]],
numpy.complexfloating,
numpy.complex64, 
numpy.complex128, 
numpy.complex256,
numpy.flexible,
numpy.character, 
numpy.bytes_, 
numpy.str_,
numpy.void,
numpy.record,
numpy.bool_,
numpy.datetime64,
numpy.object_

>>> x = np.array([1, 2, 3])
>>> x
array([1, 2, 3])

>>> x.dtype
dtype('int32')

>>> x = np.array([1, 2, 3], dtype=np.int64)
>>> x
array([1, 2, 3], dtype=int64)

>>> x = np.array([1, 2, 3], dtype=np.float32)
>>> x
array([1., 2., 3.], dtype=float32)

>>> x = np.array([1, 2, 3], dtype=np.complex64)
>>> x
array([1.+0.j, 2.+0.j, 3.+0.j], dtype=complex64)


# # with ".astypy" :
>>> x = np.array([1, 2, 3])
>>> x
array([1, 2, 3])

>>> x.astype(np.float32)
array([1., 2., 3.], dtype=float32)
>>> x
array([1, 2, 3])

>>> x = x.astype(np.float32)
>>> x
array([1., 2., 3.], dtype=float32)

>>> x.dtype
dtype('float32')



# use any : use all :

>>> my_array = np.array([1,2,3])
>>> value = 3
>>> np.any(my_array == value)
True

>>> my_array = np.array([3,3,3])
>>> value = 3
>>> np.all(my_array == value)
True

>>> my_array = np.array([[1,2,3], [4,5,6], [0, 5, 2]])
>>> value = 5
>>> np.any(my_array[:,1] == value)  
True
>>> np.all(my_array[:,1] == value)  
False

>>> my_array = np.array([[1,5,3], [4,5,6], [0, 5, 2]])
>>> value = 5
>>> np.all(my_array[:,1] == value)  
True


# use ceil :

a = np.array([-1.7, -1.5, -0.2, 0.2, 1.5, 1.7, 2.0])
np.ceil(a)
array([-1., -1., -0.,  1.,  2.,  2.,  2.])


# use np.expand_dims :

>>> import numpy as np
>>> x = np.zeros((10,10))
>>> x.shape
(10, 10)

>>> x = np.expand_dims(x, axis=0)  # axis is the position in the tuple where add a new dimension
>>> x.shape
(1, 10, 10)

>>> x = np.expand_dims(x, axis=3)
>>> x.shape
(1, 10, 10, 1)

>>> x = np.expand_dims(x, axis=1)
>>> x.shape
(1, 1, 10, 10, 1)

>>> x = np.expand_dims(x, axis=1)
>>> x.shape
(1, 1, 1, 10, 10, 1)

>>> x = np.zeros((10,10))
>>> x = np.expand_dims(x, axis=[0,3])
>>> x.shape
(1, 10, 10, 1)

>>> x = np.zeros((10,10))
>>> x = np.expand_dims(x, axis=[0,3,4])
>>> x.shape
(1, 10, 10, 1, 1)


40 ------------------->>> USO DE * Y ** EN PYTHON PARA PARAMETROS : SOBRECARGA DE FUNCIONES 2.0 :

// viene a ser como una sobrecarga de funciones o mejor llamado como un " parametro dinamico ":

def por_posicion(*args):
       cadena = ""
       for i in args:
              cadena += str(i)
              print(i)
       print("cadena = ",cadena)
       
def por_nombre(**kwargs):
       print(kwargs)
       
def Send(*args, **kwargs):
       print("\n ARGUMENTS: \n")
       for i in args:
              print(i)
       print("\n KEYWORDS ARGUMENTS: \n")
       for i in kwargs:
              print(i, " -> ",kwargs[i])
              
print("\nPOR POSICION: \n")
por_posicion(45,"alex",True,"datos",3.1416)

print("\nPOR NOMBRE: \n")
por_nombre(h="carpio",x="alexander",k="mamani")

Send(5,"alex",41.4,val="yorishi",z=49)

# SALIDA :

POR POSICION: 

45
alex
True
datos
3.1416
cadena = 45alexTruedatos3.1416

POR NOMBRE: 

{'h': 'carpio', 'x': 'alexander', 'k': 'mamani'}

 ARGUMENTS: 

5
alex
41.4

 KEYWORDS ARGUMENTS: 

val  ->  yorishi
z  ->  49

--EJEMPLO 1: 

def suma(*args):
       total = 0
       for i in args:
              total += i
       return total

print(suma(1,2,3,4,5))

--EJEMPLO 2:

def suma_todo(**kwargs):
       total = 0
       cadena = ""
       for i in kwargs:
              total += kwargs[i]
              cadena += f"{i}, "
       return cadena + " = " + str(total)

print(suma_todo(pollo=7.5,arroz=5.0,papa=3.5))

41 ---------------->>>> PANDAS AS PD :

import pandas as pd
a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(a) 

# salida:

   0  1  2
0  1  2  3
1  4  5  6 

import numpy as np
import pandas as pd
data = np.array([ [" ","col1","col2"] , ["fila1",22,33] , ["fila2",55,16] ])
print(pd.DataFrame(data = data[1:,1:], index = data[1:,0], columns = data[0,1:]))
# primer [1:,1:] para los elementos a mostrar, segundo index [1:,0] para los indices de las filas, tercero[0,1:] para los indices de la columna.
# salida:

      col1 col2
fila1   22   33
fila2   55   16

countrys = pd.Series({"Peru":"Lima","Argentina":"Buenas Aires",
                  "Chile":"San Tiago","Mexico":"Mexico CD o DF"})
print(countrys)

#salida:
Peru                   Lima
Argentina      Buenas Aires
Chile             San Tiago
Mexico       Mexico CD o DF

a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(a.shape)  # imprime el tipo de martriz en ese caso es "2X3"

a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(len(a.index))  # imprime la altura o numero de filas en este caso es "2".

a = pd.DataFrame(np.array([(1,2,3),(4,5,6)]))
print(a.describe())   #Esadisticas del Frame o matriz.

#salida:
             0        1        2
count  2.00000  2.00000  2.00000
mean   2.50000  3.50000  4.50000
std    2.12132  2.12132  2.12132
min    1.00000  2.00000  3.00000
25%    1.75000  2.75000  3.75000
50%    2.50000  3.50000  4.50000
75%    3.25000  4.25000  5.25000
max    4.00000  5.00000  6.00000

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.mean())  # imprime la media de cada columna.

#salida:
0    4.0
1    5.0
2    6.0

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.corr())  #para mostrar todas las coorrelaciones entre los numeros.

#salida:
     0    1    2
0  1.0  1.0  1.0
1  1.0  1.0  1.0
2  1.0  1.0  1.0

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.count())  #para mostrar la cantidad de los valores no nulos en el frame.

#salida:
0  3
1  3
2  3

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.max())  #para mostrar el valor mas alto en cada columna.

#salida:
0  7
1  8
2  9

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.min())  #para mostrar el valor mas bajo en cada columna.

#salida:
0  1
1  2
2  3

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.median())  #para mostrar la mediana de cada columna.

#salida:
0  4
1  5
2  6

a = pd.DataFrame(np.array([(1,2,3),(4,5,6),(7,8,9)]))
print(a.std())  #para mostrar la desviacion estandar de cada columna o en otras palabras el Delta de X.

#salida:
0  3.0
1  3.0
2  3.0


# iterate elements with other array:

X, Y = make_circles(n_samples=n_samples, factor=0.5, noise=0.05)

plt.scatter(X[Y == 0,0], X[Y == 0,1], c = 'red')
plt.scatter(X[Y == 1,0], X[Y == 1,1], c = 'blue')
plt.show()

42 ---------------->>>> MATPLOLIB : import matplotlib.pyplot as plt : use matplotlib :
|| TEXT ||

plt.text(3,-0.1, "Suma de Riemann: ", color='r')       # 1 parametro(eje x), 2 parametro(eje y), 3 parametro(string), 4 (color con una char).
plt.text(3,-0.5, "Suma de Riemann: ", color='r')

|| MARCO FIGURA ||

plt.figure(figsize=(7,6))  // PRIMER PARAMETRO DE "FIGZISE" (X,Y).

||| DIAGRAMA DE LINEA |||

EJEMPLO 1:
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 6,1) #Eje X
y = np.arange(0,6,1)  #Eje Y

plt.plot(x, y, color ="red", label="linea", linewidth = 3)
plt.legend()      #muestra la legenda de los datos.
plt.show()        #muestra una pendiente de color rojo.

EJEMPLO 2:
import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([4,6,8,10,12])   #  X1 CHOCA CON Y1, EJEMLO X1 = 4 Y Y2 = 5 SE GENERA UN PUNTO EN LA GRAFICA EN LA POSICION (X,Y) = (4,5).
y1 = np.array([5,15,10,15,5])

x2 = np.array([5,5,10,10,5])
y2 = np.array([2,7,7,2,2])

plt.plot(x1,y1, label="liena", linewidth=2, color="green")  # creacion de la recta "M"
plt.plot(x2,y2, label="linea", linewidth=2, color="blue")   # creacion de un "Cuadrado"

plt.title("Diagram de M",color="red")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| DIAGRAMA DE BARRAS |||

import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([4,6,8,10,12])
y1 = np.array([5,15,10,15,5])

x2 = np.array([5,7,9,11,15])
y2 = np.array([10,7,11,6,8])

# a diferencia de los vectores anteriores, cambiaremos el "plot" por el "bar" para barras.

plt.bar(x1,y1, label="liena", color="orange")  # creacion de las barras narangas.
plt.bar(x2,y2, label="linea", color="skyblue")   # creacion de las barras celestes.

plt.title("Diagram de Barras",color="yellow")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| HISTOGRAMAS |||

import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([4,6,8,10,12,51,5,1,3,6,94,12,53,75,98,11,33,41])   # VA SER COMO UNA CONTABILIZACION E VALORES.
y1 = np.array([0,20,40,60,80,100])

# ahora usamos "hist", PARA QUE SIRVE?, PUES EN EL PRIMER PARAMETRO VA LOS VALORES DEL EJE "Y" Y EN EL SEGUNDO LOS DEL EJE "X".
# DONDE EL EJE X GRAFICA UNA BARRA DONDE MUESTRA LA CANTIDAD DE VALORES QUE SE ENCUENTRAN ENTRE EL PUNTO (X0 Y X1 .... XN-1 Y XN).
# EJEMPLO: SE VE QUE ENTRE EL EJE X, ENTRE EL 0 Y 20 HAY 11 VALORES, ENTONCES SE DIBUJA UNA BARRA HASTA EL NUMERO 11 y ASI SUCESIVAMENTE CON LOS DEMAS.

plt.hist(x1, y1, histtype="bar", label="liena", rwidth=1, color="brown")  # creacion de las barras marrones.

plt.title(" Histograma ",color="violet")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| GRAFICO DE DISPERSION |||

# generacion de puntos en la grafica, siendo interceptados por el eje "x" y "y".
import numpy as np
import matplotlib.pyplot as plt

x1 = np.array([1.5,4,5,8,10,12])
y1 = np.array([5,2,10,8,1,14])

x2 = np.array([3.5,7,6,9,10,11])
y2 = np.array([6,4,3,12,7,9])

plt.scatter(x1, y1, label="puntos", color="red")  # creacion de los puntos rojos.
plt.scatter(x2, y2, label="puntos", color="blue")  # creacion de los puntos azules.

plt.title("Grafico de Dispersion",color="purple")      # titulo o encabezado del diagrama
plt.xlabel("Eje X Positivo")    # un texto en el eje x
plt.ylabel("Eje Y Positivo")    # un texto en el eje y
plt.legend()   
plt.grid()  # para que tenga el cuadriculado
plt.show()

||| GRAFICO CIRCULAR |||

import numpy as np
import matplotlib.pyplot as plt

#DATOS ENVIADOS.
dormir =[7,8,6,11,7]
comer = [2,3,4,3,2]
trabajar =[7,8,7,2,2]
recreación = [8,5,7,8,13]
#SACAMOS UN CONCLUSION Y SALE DIVISONES:
divisiones = [7,2,2,13] 
actividades = ['Dormir','Comer','Trabajar','Recreación']  #TEXTO QUE PARARECERA SEGUN EL ORDEN
colores = ['red','violet','skyblue','orange']  # COLORES SEGUN EL ORDEN

plt.pie(divisiones, labels=actividades, colors=colores, startangle=90, shadow=True, explode=(0.1,0,0,0), autopct='%1.1f%%')
# DIVISIONES = EL PESO DE CADA ELEMENTOS DEL ARRAY, STARTANGLE = COMIENZA CON UN ANGULO DE 90 PUDE SER NULO TAMBIEN.
# SHADOW = TRUE O FALSE SEGUN EL GUSTO, EXPLODE = SI SE PONE UN VALOR DIFERENTE A 0, SERA SEPARADO DE LOS DEMAS CON EL VALOR DADO SEGUN LA POSICION.
# AUTOPCT = SE MOSTRARA EL VALOR EN PORCENTAJES E CADA DATO.

plt.title('Gráfico circular 24 H',color = 'purple')
plt.show()


- EJEMPLO 1 DISTANCIA:

import numpy as np
import matplotlib.pyplot as plt
import math

def distancia(x1,y1):
  return math.sqrt(pow(x1[1]-x1[0],2)+pow(y1[1]-y1[0],2))

x1 = np.array([3,7])
y1 = np.array([1,4])

plt.scatter(x1,y1, color = "red")

plt.plot(x1,y1,color = 'skyblue')

plt.legend()
plt.grid()
plt.xlabel("Eje X: ")
plt.text(3,-0.1, "La Distancia entre los puntos es: "+str(distancia(x1,y1)), color='r')
plt.show()

# subplots arrays:

sigmoid = (
          lambda x: 1 / (1 + np.e ** (-x)),
          lambda x: x * (1 - x)
          )

relu = lambda x: np.maximum(x,0)


_x = np.linspace(-5, 5, 100)

plt.subplots(figsize=(12,8))

ax1 = plt.subplot(2, 2, 1)
ax1.plot(_x, sigmoid[0](_x))
ax1.set_title('sigmoid')

ax2 = plt.subplot(2, 2, 2)
ax2.plot(_x, sigmoid[1](_x))
ax2.set_title('sigmoid derivated')

ax3 = plt.subplot(2, 2, 3)
ax3.plot(_x, relu(_x))
ax3.set_title('Relu')

plt.tight_layout()
plt.show()


# subplots in images:

from PIL import Image
import matplotlib.pyplot as plt
import numpy as np

image = Image.open('dog_aux.jpg')
data = np.asarray(image)

plt.subplot(131)             # plt.subplot(rows, columns, position)
plt.imshow(Image.fromarray(data[:,:,0]))
plt.subplot(132)
plt.imshow(Image.fromarray(data[:,:,1]))
plt.subplot(133)
plt.imshow(Image.fromarray(data[:,:,2]))
plt.show()

# equivalent:

plt.subplot(221)

# equivalent but more general
ax1=plt.subplot(2, 2, 1)


# advance example:

fig, axs = plt.subplots(2, 3, sharex=True, sharey=True, figsize=(12,8)) # (rows, columns, figsize = (width, height))

colors = ['red','blue']
# v = vector, g = rotate, f = shear

for i, elements in enumerate([first_path, second_path]):
  cade = ''
  for j, element in enumerate(elements):
    x = elements[element]
    for c,e in enumerate([x[:,0], x[:,1]]):
      axs[i,j].quiver([0], [0], [e[0]], [e[1]], angles='xy', scale_units='xy', scale=1, alpha=1, color = colors[c])

    if element =='rotate 90°':
      cade += '(G)'
    elif element =='shear':
      cade +='(F)'
    else:
      cade +='(v)'

    axs[i,j].set_title(element)
    axs[i,j].set_ylabel(cade)

    plt.xlim(-1.5,1.5)
    plt.ylim(-1.5,1.5)
    axs[i,j].axvline(x=0,c='gray',zorder=0)
    axs[i,j].axhline(y=0,c='gray',zorder=0)
    axs[i,j].grid()


plt.tight_layout() # more extent, the spacing between the plots(by default is  1.8).
# plt.tight_layout(h_pad=0.2, w_pad=0.2) # the spacing vertical and horizontal.
plt.show()

# save fig:

import matplotlib
import matplotlib.pyplot as plt
import numpy as np

y = [2,4,6,8,10,12,14,16,18,20]
x = np.arange(10)

fig = plt.figure(figsize=(10,6))  # (width, height)
ax = plt.subplot(111) # plt.subplot(1,1,1)
ax.plot(x, y, label='$y = numbers')
plt.title('Legend inside')
ax.legend()
plt.show()

fig.savefig('plot.png')

# figure 3d example:

import numpy as np
import matplotlib.pyplot as plt

z = np.random.randint(100, size =(50))
x = np.random.randint(80, size =(50))
y = np.random.randint(60, size =(50))

#until = 360 # 360 range color
#c = np.arange(0,until)
#colors = (c)

fig = plt.figure(figsize = (10, 6))
ax = plt.axes(projection ="3d")

ax.scatter3D(x, y, z, c =(x+y+z),cmap=plt.get_cmap('hsv')) # camp: para color mas chingon, (x,y,z) forman un color mediante numeros.

plt.title("simple 3D scatter plot")
plt.show()

# other example:

import matplotlib.pyplot as plt
import numpy as np


fig = plt.figure(figsize=(10,6))
ax = fig.gca(projection='3d')


ax.quiver([0], [0], [0], [1], [1], [1], length=0.05, normalize=True, color='gray')
      
ax.text2D(0, 1, 'hola', transform=ax.transAxes)
ax.grid()
plt.show()

# figure and bar description:

import numpy as np
import matplotlib.pyplot as plt

z = 4 * np.tan(np.random.randint(10, size =(500))) + np.random.randint(100, size =(500))
x = 4 * np.cos(z) + np.random.normal(size = 500)
y = 4 * np.sin(z) + 4 * np.random.normal(size = 500)
 
fig = plt.figure(figsize = (16, 9))
ax = plt.axes(projection ="3d")
   
# Add x, y gridlines 
ax.grid(b = True, color ='grey', 
        linestyle ='-.', linewidth = 0.3, 
        alpha = 0.2) 
 
# Creating color map
my_cmap = plt.get_cmap('hsv')
 
# Creating plot
sctt = ax.scatter3D(x, y, z,
                    alpha = 0.8,
                    c = (x + y + z), 
                    cmap = my_cmap, 
                    marker ='^')
 
plt.title("simple 3D scatter plot")
ax.set_xlabel('X-axis', fontweight ='bold') 
ax.set_ylabel('Y-axis', fontweight ='bold') 
ax.set_zlabel('Z-axis', fontweight ='bold')

#ax.set_xlim(0,1)
#ax.set_ylim(0,1)
#ax.set_zlim(0,1)

fig.colorbar(sctt, ax = ax, shrink = 0.5, aspect = 5)
plt.show()


# mesh grid :

import numpy as np
import matplotlib.pyplot as plt

size = 50
x1 = np.linspace(-1, 1, size)
y1 = np.linspace(-1, 1, size)
mesh = np.zeros((size, size))

for i in range(size):
  for j in range(size):
    mesh[i,j] = np.random.randint(0,2)

plt.pcolormesh(x1,  y1, mesh, cmap='coolwarm')
plt.show()


import numpy as np
import matplotlib.pyplot as plt

size = 50
x1 = np.linspace(-1, 1, size)
y1 = np.linspace(-1, 1, size)
mesh = np.random.rand(size, size)

plt.pcolormesh(x1,  y1, mesh, cmap='coolwarm')
plt.show()


import numpy as np
import matplotlib.pyplot as plt

size = 50
x1 = np.linspace(-1, 1, size)
y1 = np.linspace(-1, 1, size)
mesh = np.zeros((size, size))

con = 0
current = 0.0
for i in range(size):
  for j in range(size):
    if con<25:
      mesh[i,j] = current
    else:
      mesh[i,j] = current
    current += 0.01
  con+=1

plt.pcolormesh(x1,  y1, mesh, cmap='coolwarm')
plt.show()


# use contour : contourf :

plt.contour(_x,_y,_z, 100) # lines without font
plt.show()


plt.contourf(_x,_y,_z, 100) # color areas
plt.show()

plt.contourf(_x,_y,_z, 100)
plt.colorbar() # deep level colors
plt.show()

43 ---------------->>>>  OPERADORES DE CLASE EN PYTHON : OPERATORS CLASS :

class Backpack:
  def __init__(self, owner):
    self.owner = owner
    self.__store = {}

    print('backpack bought.')

  def __call__(self, item):   # obj()
    if item not in self.__store:
      self.__store[item] = 1
    else:
      self.__store[item] += 1

  def __getitem__(self, idx):  # obj[i]
    if idx < 0 or idx >= len(self.__store):
      return 'that item doesnt exist in the backpack.'
    return list(self.__store.items())[idx]

  def __len__(self):   # len(obj)
    return sum(self.__store.values())

  def __repr__(self):  # print(obj)
    return f'store: {self.__store}'

  def __gt__(self, obj):  # >
    return len(self) > len(obj)
  def __lt__(self, obj):  # <
    return len(self) < len(obj)
  def __ge__(self, obj):  # >=
    return len(self) >= len(obj)
  def __le__(self, obj):  # <=
    return len(self) <= len(obj)
  def __eq__(self, obj):  # ==
    return len(self) == len(obj)
  def __ne__(self, obj):  # !=
    return len(self) != len(obj)
  
          
Mochila = Backpack('Alex') # __init__

Mochila('pencil')   # __call__
Mochila('pencil')   # ...
Mochila('book')     # ...
Mochila('door')     # ...

print(Mochila[2])   # __getitem__
print(len(Mochila)) # __len__
print(Mochila)      # __repr__


OtherBack = Backpack('Pedro')  # __init__
OtherBack('ruler')          # __call__
OtherBack('eraser')         # ...
print(OtherBack[5])         # __getitem__
print(OtherBack)            # __repr__
print(Mochila > OtherBack)  # __gt__
print(Mochila <= OtherBack) # __le__

# output:

backpack bought.
('door', 1)
4
store: {'pencil': 2, 'book': 1, 'door': 1}
backpack bought.
that item doesnt exist in the backpack.
store: {'ruler': 1, 'eraser': 1}
True
False


# numbers operators :

class Num:
  def __init__(self, nums):
    self.nums = nums
  
  def __add__ (self, Obj):  # operador '+' suma de objetos
    res =  self.nums + Obj.nums  # [a,b,c] + [c,d] = [a,b,c,c,d]
    return Num(res)

  def __sub__ (self, Obj):  # operador '-' resta de objetos
    aux = self.nums.copy()
    for n in Obj.nums:
        if n in aux:
           aux.remove(n)  # [a,b,c] - [c,d] = [a,b]
    return Num(aux)  

  def __repr__(self):
    return f' set: {self.nums}'

a = Num([1,2,3])
b = Num([2,3,5,6])
print(a,b)

c = a + b  # __add__
print(c)

d = a - b  # __sub__
print(d)

# output:

 set: [1, 2, 3]  set: [2, 3, 5, 6]
 set: [1, 2, 3, 2, 3, 5, 6]
 set: [1]


# use str() function :

class Coorde:
  def __init__(self, x,y):
    self.x, self.y = x, y
  
  def __str__ (self):  # str(obj)
    return "(" + str(self.x) + ", " + str(self.y) + ")"


vector = Coorde(3,2)
print(str(vector))

# output:

(3, 2)


# Imprime el Objeto y destructor del objeto.

class Data:
        def __init__(self, store):
                
                self.store = store
                
        def __repr__(self):
                return f' Your data {self.store}'

        def __del__(self):
                print('the Object was deleted')

inventary = Data([1,2,3])
print(inventary)
del(inventary)

# output:

 Your data [1, 2, 3]
the Object was deleted

44 ---------------->> Use " * " :

l = [1,2,'aea',True]

a = {'aea':1,'gaa':3}

print(*l)
print(l)
print(*a)
print(a)

- output:

1 2 aea True
[1, 2, 'aea', True]
aea gaa
{'aea': 1, 'gaa': 3}

a = {'a':1, 'b':2}
b ={'c':3, 'd':4}

c = {*a,*b}   # {'c', 'a', 'b', 'd'}

c = {**a,**b}  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

45 ---------------->> PyAutoGui : auto py :

// escribir por teclado automatico:

import pyautogui, time
time.sleep(5)
for _ in range(1000):
	pyautogui.typewrite("mensaje spam")
	pyautogui.press("enter")
	print(_)

import pyautogui, time
time.sleep(5)
text = ["hola", "gente", "hello"]
for word in text:
	pyautogui.typewrite(word)
	pyautogui.press("enter")

// advertencia o warning:
import pyautogui
def showDialog(title='Error!', 
    text='''
    POSIBLES ERRORES:
    \n* Ingreso mal el url o link de YT.
    \n* Hubo un error a la hora de descargar o convertir un archivo.
    \n* Cierre la app o intentelo de nuevo.
    '''):

    pyautogui.alert(text, title, button='OK')


# keyboard entry : dialog input :

import pyautogui
pyautogui.password(text='passasd', title='tt', default='', mask='*')  # (text, title, add the in the input, mask for 'hola' => '****' or 'hi' and mask='o'=>'oo')

46 ----------------->> DOCS : DOCX : WORD : docs to pdf :

import zipfile
import docx
import os

path = 'D:\....'


# zf = zipfile.ZipFile(path + '\file_name.zip')
# #print(zf.namelist())
# zf.extractall(path2)
# zf.close()

photos = list(os.listdir(path2))
#print(photos)

doc = docx.Document()

for i in range(len(photos)):
    doc.add_picture(path + photos[i], width=docx.shared.Cm(8), height=docx.shared.Cm(10))

doc.save('images_etc.docx')

# other example advance:

import docx
# create an instance of a word document
doc = docx.Document()
# add a heading of level 0 (largest heading)
doc.add_heading('Heading for the document', 0)
# add a paragraph and store
# the object in a variable
doc_para = doc.add_paragraph('Your paragraph goes here, ')
# add a run i.e, style like
# bold, italic, underline, etc.
doc_para.add_run('hey there, bold here').bold = True
doc_para.add_run(', and ')
doc_para.add_run('these words are italic').italic = True
# add a page break to start a new page
doc.add_page_break()
# add a heading of level 2
doc.add_heading('Heading level 2', 2)
# pictures can also be added to our word document
# width is optional
doc.add_picture('path_to_picture')
# now save the document to a location
doc.save('path_to_document')


# read docx :

import docx

doc = docx.Document('test.docx')
print(len(doc.paragraphs)) # lenght of lines.

for line in doc.paragraphs:  # lines
        print(line.text) # convert class line to text.


## convert docx to pdf :

from docx2pdf import convert 

convert("GFG.docx") # espesific doc
  
convert("GeeksForGeeks\GFG_1.docx", "Other_Folder\Mine.pdf")  # in folder

convert("GeeksForGeeks\")  # all in a folder


## convert pdf to docx :

from pdf2docx import Converter

pdf_file = 'test.pdf'
docx_file = pdf_file[:-4] + '.docx'

print(docx_file)

cv = Converter(pdf_file)
cv.convert(docx_file, start=0, end=None)  # start = pague(0 by default, you can choose 1,2...), end = finihs pdf.
cv.close()


47 ----------------->> DERIVATES : DERIVADAS : 

import sympy as sp

x = sp.Symbol('x') # Variable dependiente

y = x**3 # funcion o f(x)

print(sp.diff(y,x))  #(funcion, variable, numero de derivadas)
print(sp.diff(y,x,2))
print(sp.diff(y,x,3))


### WITH NUMPY

import sympy as sp
import numpy as np

x = sp.Symbol('x') # Variable dependiente

y = x**3 + 1 # funcion o f(x)

y_prime = sp.diff(y,x)

f = sp.lambdify(x, y_prime, 'numpy')
print(f(np.ones(3)))

<<<<<<< HEAD
48 ----------------->> Create QR Code : pip install qrcode

// Simple text:

import qrcode

img = qrcode.make('hello, you create a text qr code')
img.save('D:/my_qrcode.png')


// Configuration QrCode:

import qrcode

qr = qrcode.QRCode(box_size=20, border=2)
qr.add_data('hola amigooo')
#qr.make(fit=True)

img = qr.make_image(fill_color='black', back_color='white')
img.save('D:/my_qrcode.png')

// Configuration QrCode 2.0:

import qrcode

qr = qrcode.QRCode(box_size=50, border=1)
qr.add_data('https://www.youtube.com/')
#qr.make(fit=True)

img = qr.make_image(fill_color='red', back_color='blue')
img.save('D:/my_qrcode.png')


// save qr image in other format

import qrcode
import qrcode.image.svg as SG

factory = SG.SvgPathImage
img = qrcode.make('hi, hello, hola, etc.', image_factory=factory)
img.save('D:/my_qrcode.svg')

49 ----------------->> Open Images: images : images to pdf :

# 1 option:
from PIL import Image
data = Image.open('my_cat.png')
data.show()

# 2 option:
import matplotlib.pyplot as plt
from PIL import Image

data = Image.open('my_cat.png')
plt.imshow(data)
plt.show()

# resize image:
from PIL import Image
img = Image.open('my_cat.png').resize((28,28)) # 28x28 pixels

# RGB to GRAY : Scale : RGB => gray : (R + G + B)/3
from PIL import Image
img = Image.open('my_cat.png')
new_img = img.convert('L')  # 'L' = (8-bit pixels, black and white)

# write image:
import pyautogui
import PIL.Image as Image

screen = pyautogui.screenshot()
img = Image._show(screen)

# save images:

from PIL import Image
path = 'c:/users/usuario/pictures/dog_aux.jpg'
img = Image.open(path)
img.save('c:/users/usuario/pictures/dog.png')


# convert image to array:

from PIL import Image
import numpy as np

img = Image.open('dog_aux.jpg')
array = np.array(img)
print(array) # this image will have 3 channels.

img = Image.open('dog_aux.jpg').convert('L') # convert image of RGB to GrayScale = (R+G+B)/3
array = np.array(img)
print(array) # this image will have one channel in gray scale.

# properties image:

from PIL import Image
image = Image.open('dog_aux.jpg')

print(image.format) #PNG
print(image.size)  #(800, 450)
print(image.mode) #RGB


# image to array and vice versa:
import numpy as np
from PIL import Image

image = Image.open('dog_aux.jpg')
data = np.asarray(image)    # good
print(type(data))  # <class 'numpy.ndarray'>
print(data.shape)  # (1200, 900, 3)

image2 = Image.fromarray(data)  # good
print(type(image2)) # <class 'PIL.Image.Image'>
print(image2.size)  # (900, 1200)


image3 = np.array(image2.getdata()) # bad
print(type(image3)) # <class 'numpy.ndarray'>
print(image3.shape) # (1080000, 3)

# SKIMAGE (it opens images and can be to set as array)
# if we want set the img use 'skimage' (example, extract rbg and combinations):

import matplotlib.pyplot as plt
from skimage import io

data = io.imread('dog_aux.jpg')

titles = ['Red','Green','Blue','Red & Green','Red & Blue','Green & Blue']

# data[:,:,0] = Red but in gray scale
# data[:,:,1] = Green ...
# data[:,:,2] = Blue ...

# pure red
# data[:,:,1] = 0
# data[:,:,2] = 0

# pure green
# data[:,:,0] = 0
# data[:,:,2] = 0

for i in range(3):
        aux = data.copy()
        for j in range(3):
                if i != j:
                        aux[:,:,j]=0
        plt.subplot(231+i)
        plt.title(titles[i])
        plt.imshow(aux)

for i in range(3,6):
        aux = data.copy()
        aux[:,:,5-i]=0
        
        plt.subplot(231+i)
        plt.title(titles[i])
        plt.imshow(aux)

plt.show()


# complete example:

import matplotlib.pyplot as plt
from skimage import io

data = io.imread('dog_aux.jpg')
titles = ['pure red','pure green','pure blue',
          'red & green','red & blue','green & blue',
          'only Red', 'only Green', 'only Blue']

pure = []
comb = []

for i in range(3):
        aux = data.copy()
        for j in range(3):
                if i != j:
                        aux[:,:,j]=0
        plt.subplot(431+i)
        plt.title(titles[i])
        plt.imshow(aux, cmap='gray')
        pure.append(aux)

for i in range(3,6):
        aux = data.copy()
        aux[:,:,5-i]=0
        
        plt.subplot(431+i)
        plt.title(titles[i])
        plt.imshow(aux, cmap='gray')
        comb.append(aux)

for i in range(6,9):
        aux = data[:,:,i-6]
        plt.subplot(431+i)
        plt.title(titles[i])
        plt.imshow(aux, cmap='gray')

ax = plt.subplot(4,3,10)
ax.set_title('original')
ax.imshow(data, cmap='gray')

# Average pure
aux = sum([data[:,:,0], data[:,:,1], data[:,:,2]])/3
ax = plt.subplot(4,3,11)
ax.set_title('average pure')
ax.imshow(aux, cmap='gray')

# Average gray
aux = sum(pure)/3
ax = plt.subplot(4,3,12)
ax.set_title('average gray')
ax.imshow(aux, cmap='gray')

plt.show()

# Average combinations
aux = sum(comb)/3
plt.imshow(aux, cmap='gray')
plt.show()

# SAVE IMAGES TO PDF : ITERATE :

from PIL import Image

image1 = Image.open(r'C:\Users\Ron\Desktop\Test\image1.png')
image2 = Image.open(r'C:\Users\Ron\Desktop\Test\image2.png')
image3 = Image.open(r'C:\Users\Ron\Desktop\Test\image3.png')
image4 = Image.open(r'C:\Users\Ron\Desktop\Test\image4.png')
 
im1 = image1.convert('RGB')
im2 = image2.convert('RGB')
im3 = image3.convert('RGB')
im4 = image4.convert('RGB')

imagelist = [im2,im3,im4]

im1.save(r'C:\Users\Ron\Desktop\Test\myImages.pdf',save_all=True, append_images=imagelist) # if happend a mistake use "im1 = image1.convert('RGB')".


50 ----------------->> Windown rotate or controller:

pip install rotate-screen
pip install pypiwin32

import rotatescreen
import time
screen = rotatescreen.get_primary_display()  # originality the window is in angle 0°

for i in range(1,11):
    time.sleep(0.2)
    val = i*90 % 360
    screen.rotate_to(val)

51 ----------------->> all, any, yield, and trick:

# trick 1
a, b = input('Enter 2 numbers separated by a space: ').split()
print(f'{a} U {b} = {a+b}')

# trick 2
age = 27
weigth = 72
sex = 'M'

if age > 20 and weigth < 100 and sex == 'M':
        print('he cant be a segurity police, with and')
        
if age > 20 or weigth < 100 or sex == 'M':
        
        print('he cant be a segurity police, with or')

conditions = [age > 20, weigth < 100, sex == 'M']


if all(conditions):    # and
        print('he cant be a segurity police, with all')

if any(conditions):     # or
        print('he cant be a segurity police, with any')

# trick 3
def sum_elements(*args):  # *[1,2,3,4,5] = 1,2,3,4,5
        res = 0
        for i in args:
                res += i
        return res
print(sum_elements(1,2,3,4,5))

# trick 4
string = 'abcdefghi'
print(string[::2])  # where [begin:finish:steps] type for
print(string[::-1]) # backward

# trick 5
def table_of_number(x):
        for i in range(11):
                yield f'{x} x {i} = {x*i}'

values = table_of_number(3) # ['3 x 0 = 0', '3 x 1 = 3' ... '3 x 10 = 30'].
for i in values:
        print(i)

def split_test(arr):
        for element in arr:
                yield element

values = list(split_test('hola gente'))
print(values)

def shop(n):
        for i in range(10):
                yield i + 1
                yield 'client'

print(list(shop(2)))  # [1, 'client', 2, 'client', 3, 'client', 4, 'client', 5, 'client', 6, 'client', 7, 'client', 8, 'client', 9, 'client', 10, 'client']

52 -------------->> os para cmd : use os : import os : use subprocess :

# send and receive message temporary:
import os
latencia = list(os.popen('ping google.com'))
ip_pc = list(os.popen('ipconfig'))
print(latencia, ip_pc)

# send message:

import os
os.system('ping google.com')

# get directory actual:

1 option: os.path.dirname(os.path.abspath(__file__))
2 option: os.path.abspath(os.getcwd())
3 option: os.path.dirname(__file__)


# get all elements in this directory:

os.listdir() # in current directory
os.listdir(r"C:\Users\USUARIO\Desktop\gg\my games\VT voice\data\images")  # with a directory passed

# join two paths:

path = os.path.join(os.path.dirname(os.path.abspath(__file__)), NOMBRE_ARCHIVO) 
path = os.path.abspath(__file__)) + '\\' + NOMBRE_ARCHIVO

# rename:

import os 
source = 'GeeksforGeeks/old.txt'
dest = 'GeekforGeeks/new.txt'
os.rename(source, dest) 

# exists file or path:

import os
fileName = r"C:\Test\test.txt"
os.path.exists(fileName) # true or false according you disk
fileName = r"C:\Test"
os.path.exists(fileName)

import os
fileName = r"C:\Test\test.txt"
os.path.isfile(fileName)  # true if this path is a file, else is a folder # output: True

import os

fpath = 'D:/workspace/python/samplefile.txt'
isFile = os.path.isfile(fpath)
print('The file present at the path is a regular file:', isFile)  # The file present at the path is a regular file: True


# is dir :
fpath = 'D:/workspace/python/'
isDirectory = os.path.isdir(fpath)
print('Path points to a Directory:', isDirectory)  # Path points to a Directory: True

# is empty our file ? : stat : 

import os
file_path = 'mysample.txt'

'''mysample.txt:
hi it is the file\n
bye
'''
## return number of characters in the file including the line break(\n).
print(os.stat(file_path).st_size) # return 22


import os
file_path = 'mysample.txt'
print(os.path.getsize(file_path)) # return 22

# remove path:

path = 'D:\images' # it also can be 'D:\images\img.png'
os.remove(path)

os.system(f'DEL /F /A {path}')

# make a folder:

path = 'D:\images'
os.mkdir(path)
os.system(f'MKDIR {path}')
os.system(f'MD {path}')
os.system(f'COPY {img} {folder_name}')

# tree : walk :

import os
print(list(os.walk('test'))) # [('test', ['other_folder'], ['a.xlsx', 'b.mp3', 'c.docx', 'd.pdf']), ('test\\other_folder', [], [])]
print(os.path.basename('test\\a.xlsx')) # a.xlsx


# get type of file :

print(path)
OUTPUT
/Home/Desktop/some_file.csv

name, extension = os.path.splitext(path)

print(name)
OUTPUT
/Home/Desktop/some_file
print(extension)
OUTPUT
.csv

## subprocess : SUBPROCESS :

# run a line
import subprocess
def cmd(commando):
    subprocess.run(commando, shell=True)

# examples:
cmd('TITLE Título de la ventana')

cmd('myscript.cmd parametro1 parametro2')

# Al usar shell=Truese pasan los parametros como texto

def cmd(commando):
    resultado = subprocess.run(commando, shell=True)
    # Comprobar resultado, si es diferente de 0 lanza una excepción
    resultado.check_returncode()
 
53 -------------->> decoradores : decorators

# Example 1:
def verificar_denominador(funcion):
        def verificar(a,b):
                if b==0:
                        return 'Error: no existe la division por cero.'
                return funcion(a,b)
        return verificar

@verificar_denominador
def dividir(a,b):
        return a / b

print(dividir(12,3)) # 4.0
print(dividir(12,0)) # Error: no existe la division por cero.

# Example 2:
def subtraccion_mayor(funcion):
        def mayor(a,b):
                if a > b:
                        return funcion(a,b)
                a, b = b, a
                return funcion(a,b)
        return mayor

@subtraccion_mayor
def sustraer(a,b):
        return a - b

print(sustraer(5,3)) # 2
print(sustraer(2,9)) # 7


54 -------------->> Crear un gif : creat gif :

import imageio
import os

images = []
filenames = os.listdir()  # lista de todos los elementos en tu directorio actual

for filename in filenames:
    images.append(imageio.imread(filename))

imageio.mimsave('my_animates.gif', images)


# example 2:

import numpy as np
import imageio
import matplotlib.pyplot as plt
import os
import shutil
from matplotlib.path import Path
import matplotlib.patches as patches
os.mkdir('images_plt')
from matplotlib.patches import PathPatch


x = np.array([1,1,0,-1,-1])
y = np.array([0,1,1, 1, 0])

filenames = []

def draw_vectors(vectors, colors='red', xxlim=-2, xylim=2, yxlim=-1, yylim=2, title='', pos=0):
  fig = plt.figure()
  ax = fig.add_subplot(111)

  if pos == 0:
    ax.add_patch(
     patches.Rectangle(
        (0.03, 0.03),
        1,1,
        facecolor = 'gold',
     ))
  elif pos == 1:
    path = Path([[0,0],[0,1],[1,2],[1,1],[0,0]])
    patch = PathPatch(path, facecolor='gold')
    ax.add_patch(patch)
  elif pos == 2:
    pass
  elif pos == 3:
    path = Path([[0,0],[0,1],[-1,2],[-1,1],[0,0]])
    patch = PathPatch(path, facecolor='gold')
    ax.add_patch(patch) 
  else:
    ax.add_patch(
     patches.Rectangle(
        (-0.025, 0.03),
        -1,1,
        facecolor = 'gold',
     ))    
  

  for i,v in enumerate(vectors):
    try:
      ax.quiver([0],[0],[v[0]], [v[1]], color=colors[i], angles='xy', scale_units='xy', scale=1, alpha=1)
    except:
      ax.quiver([0],[0],[v[0]], [v[1]], color=colors, angles='xy', scale_units='xy', scale=1, alpha=1)
  
  ax.axvline(x=0,c='gray',zorder=0) # zorder for background
  ax.axhline(y=0,c='gray',zorder=0)

  ax.set_xlim(xxlim,xylim)
  ax.set_ylim(yxlim,yylim)

  plt.title(title)

  plt.grid()
  path = 'images_plt/place_vector' + str(pos+1) + '.png'
  filenames.append(path)
  plt.savefig(path)

tl = ['Determinant = 1 & Area = 1', 'determinant = 1 & Area = 1', 'determinant = 0 & Area = 0', 'determinant = -1 & Area = 1', 'determinant = -1 & Area = 1',]
for i in range(x.shape[0]):
    draw_vectors([[0,1] , [x[i],y[i]]],colors=['green','red'],pos=i,title=tl[i])

images = []
for filename in filenames:
  for _ in range(4):
    images.append(imageio.imread(filename))

imageio.mimsave('determinant_negative.gif', images)
shutil.rmtree('images_plt') 


55 -------------->> Type Hinting : tipo de parametro de funciones y salida :

# 1 Example (function where the parameter must be an integer(int) and return a string(str)):
 
def function_age(age : int) -> str:
        return f'you age is: {age}'

print(type(function_age(15)))   # <class 'str'>

# 2 Example:

def input_a(a : int) -> str:
        return a * 10

def print_a(a : str):
        return f'the element is: {a}'

print(print_a(input_a(3))) # the element is: 30

56 -------------->> pytube : youtube python :

import pytube # pip install pytube

url = 'https://www.youtube.com/watch?v=UteUqDoCe2s'
resolution = '720p'   # Video resolution i.e. "720p", "480p", "360p";  without audio: "240p", "144p".

video = pytube.YouTube(url)
stream = video.streams.filter(resolution = resolution).first() # get video, audio, and set the resolution.
stream.download()

# other form:

import pytube

url = 'https://www.youtube.com/watch?v=UteUqDoCe2s'

video = pytube.YouTube(url)
stream = video.streams.first() # get video and audio with low quality, that is to say, by default.

# stream = video.streams.get_lowest_resolutiont() # get video and audio with low quality.
# stream = video.streams.get_highest_resolution() # get video and audio with maxime quality.

stream.download()

# Extra:

video = pytube.YouTube(url)

video.title # Title of the video
video.video_id # Id 
video.age_restricted # Age or when was published.

resolution = 18     # 18, 22, 137, 313. (low, medium, high, very high)
stream = video.streams.get_by_itag(resolution) # get only video in mp4.

stream = video.streams.get_audio_only() # get only audio in mp4.

from pytube import YouTube
video = YouTube('https://www.youtube.com/watch?v=UteUqDoCe2s')
stream = video.streams.filter(only_audio=True).first()
stream2 = video.streams.filter(only_video=True).first()
stream.download()
stream2.download()

from pytube import YouTube
video = YouTube('https://www.youtube.com/watch?v=UteUqDoCe2s')
stream = video.streams.filter(only_audio=True).all()
stream[0].download()


stream = video.streams.all() # get all information about the video
print(list(stream))

stream.default_filename # the filename of the video, e.g: 'matematics.mp4'


# get audio and conver to mp3:

from pytube import YouTube
from moviepy.editor import VideoFileClip
import os

video = YouTube('https://www.youtube.com/watch?v=UteUqDoCe2s')
stream = video.streams.get_lowest_resolution() 	    # simitar to: "video.streams.first()"
stream.download()

filename = stream.default_filename

convert = VideoFileClip(filename)
convert.audio.write_audiofile(filename[:-4] + '.mp3')  # 'matematics.mp4' => 'matematics' + '.mp3'
convert.close()

os.remove(filename) # remove the video mp4.


# if apper the error:
# self.fps = infos['video_fps']
# KeyError: 'video_fps'
# is because you downloaded a video without frames, the solution for this problem is download the video with audio and video.
# "video.streams.get_lowest_resolution()", or "video.streams.first()", "stream = video.streams.all();  stream[0].download()", "video.streams.filter().first()", etc.


# playlist:

playlist = pytube.Playlist(url)
resolution = '360p'

for ulr in in playlist:
	video = pytube.YouTube(url)
	stream = video.streams.get_by_resolution(resolution)
	stream.download()

# download:

video = pytube.YouTube(url) # this script is in '..\app\main.py'
stream = video.streams.first()
stream.download(output_path = r'..\app\youtube_downloads', filename='hola') # also we can set the path of the installing, or create a folder as youtube_donwloads.
# finename = name that we want, by default is in format '.mp4'.

57 -------------->> voice to text : voice reproduce of text : winsound : text to voice : speech recogition : gTTs : sounddevice :

# vocie to text:
# example 1

from speech_recognition import Microphone, Recognizer, AudioFile, UnknownValueError, RequestError

recognizer = Recognizer()
microphone = Microphone()

with microphone:
        recognizer.adjust_for_ambient_noise(microphone, duration=1) # for better understanding, analisys of the words, by default is 1.

        print('Talk pls: ')
        audio = recognizer.record(microphone, 5) # record audio (microphone object, time to record)
        #audio = recognizer.listen(microphone) # This method takes an audio source as its first argument and records input from the source until silence is detected.
        with open('voice.wav','wb') as file:  # it must saved in file binary('wb')
                file.write(audio.get_wav_data()) # 'audio.get_wav_data()' get the data in binary of the variable 'audio'.

with AudioFile('voice.wav') as file:  # open and read file.wav in binary
        recognizer.adjust_for_ambient_noise(file) # for better performance.
        audio = recognizer.record(file)
        
try:
        print('end record...')
        text = recognizer.recognize_google(audio) # recognizer of google.
        print('you said: ',text)
        
except RequestError as exc:
        print(exc)
        
except UnknownValueError:
        print(' Unable to recognize.')


# example 2
import speech_recognition as sr
r = sr.Recognizer() 

while True:
    with sr.Microphone() as source:
        print('Speak Anything : ')
        audio = r.listen(source)
    try:
        text = r.recognize_google(audio)
        print('You said: {}'.format(text))
    except:
        print('Sorry could not hear')


# example 3
import speech_recognition

recognizer = speech_recognition.Recognizer()
while True:
        try:
                with speech_recognition.Microphone() as mic:
                        recognizer.adjust_for_ambient_noise(mic, duration=0.2)
                        audio = recognizer.listen(mic)

                        text = recognizer.recognize_google(audio)
                        print(f'Recognizer: {text}')
                        
        except speech_recognition.UnknownValueError():
                recognizer = speech_recognition.Recognizer()
                continue


# voice reproduce of text : https://gtts.readthedocs.io/en/latest/module.html#languages-gtts-lang

from gtts import gTTS
from playsound import playsound
import os


NOMBRE_ARCHIVO = "voz.mp3"
# PATH =  "D:\\data\\" + NOMBRE_ARCHIVO

message = input('you text: ')
tts = gTTS(message, lang='es') # (message, lang='es-us') 'es-us': 'Spanish (United States)'

tts.save(NOMBRE_ARCHIVO)  # Do the TTS API request and write result to file.
# tts.write_to_fp(PATH) # Do the TTS API request(s) and write bytes to a file-like object.

playsound(NOMBRE_ARCHIVO)
os.system(f'DEL /F /A {NOMBRE_ARCHIVO}')

# path = os.path.join(os.path.dirname(os.path.abspath(__file__)), NOMBRE_ARCHIVO) # os.path.abspath(__file__)) + '\\' + NOMBRE_ARCHIVO
# os.remove(path)

# other form
from gtts import gTTS
tts = gTTS('hello', lang='es', tld='fr') # (text, language, accent)
tts.get_bodies()  # get the body audio : Get TTS API request bodies(s) that would be sent to the TTS API.


# beep sound:

import winsound
fre = 2500
dur = 5000
winsound.Beep(fre,dur)
winsound.Beep(fre,dur)

# recording audio :

import speech_recognition as sr

r = sr.Recognizer()

NOMBRE_ARCHIVO = "voz.wav"


with sr.Microphone() as source:
        
        print('Speak Anything : ')
        
        audio = r.listen(source)
        data = audio.get_wav_data()
        
        with open(NOMBRE_ARCHIVO, "wb") as file:
                file.write(data)
                
        print('finish')


# Pyttsx3 : send text to voice :

# example 1:
import pyttsx3

speaker = pyttsx3.init()

dialog = ['hola','its my voice bot','si sisi ta galan ese otaku']
for phrase in dialog:
        speaker.say(phrase)
        speaker.runAndWait()

# example 2(read pfd and play to voice(audiobook)):

import pyttsx3
import PyPDF2

book = open('test.pdf', 'rb')
pdfReader = PyPDF2.PdfFileReader(book)
pages = pdfReader.numPages

speaker = pyttsx3.init()

for num in range(7, pages):
        page = pdfReader.getPage(num)
        text = page.extractText()
        speaker.say(text)
        speaker.runAndWait()


# sounddevices :

from scipy.io.wavfile import write
import os
 
fs = 44100  # this is the frequency sampling; also: 4999, 64000
seconds = 5  # Duration of recording
 
myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
print("Starting: Speak now!")
sd.wait()  # Wait until recording is finished
print("finished")
write('output.wav', fs, myrecording)  # Save as WAV file
os.startfile("output.wav")



# >>> plot any file.wav and frecuency :
# https://programmerclick.com/article/33491350808/

import wave
import struct
import matplotlib.pyplot as plt
import numpy as np

wave_file=wave.open("xsong.wav", 'r')

channels = wave_file.getnchannels()
samp_width = wave_file.getsampwidth()
frame_rate = wave_file.getframerate()
numframes = wave_file.getnframes()


print("channel",channels)
print('samp_width',samp_width)
print('frame_rate',frame_rate)
print('numframes',numframes)


x = np.arange(numframes)
data = np.zeros(numframes)

for i in range(numframes):
    frame = wave_file.readframes(1)
    data[i] = struct.unpack("h",frame[0:2])[0] # Convierte datos binarios en decimales (entero de 16 bits con signo) porque el tamaño de muestra aquí es de 16 bits

# standarization:

std = np.std(data)
mean = np.mean(data)

data -= mean
data /= std

# plot data
plt.plot(x, data)
plt.show()

wave_file.close()


# espectograma con animacion: https://pyshine.com/How-to-make-a-real-time-voice-plot/

import queue
import sys
from matplotlib.animation import FuncAnimation
import matplotlib.pyplot as plt
import numpy as np
import sounddevice as sd

# Lets define audio variables
# We will use the default PC or Laptop mic to input the sound

device = 0 # id of the audio device by default
window = 1000 # window for the data
downsample = 1 # how much samples to drop
channels = [1] # a list of audio channels
interval = 30 # this is update interval in miliseconds for plot

# lets make a queue
q = queue.Queue()
# Please note that this sd.query_devices has an s in the end.
device_info =  sd.query_devices(device, 'input')
samplerate = device_info['default_samplerate']
length  = int(window*samplerate/(1000*downsample))

# lets print it 
print("Sample Rate: ", samplerate)

# Typical sample rate is 44100 so lets see.

# Ok so lets move forward

# Now we require a variable to hold the samples 

plotdata =  np.zeros((length,len(channels)))
# Lets look at the shape of this plotdata 
print("plotdata shape: ", plotdata.shape)
# So its vector of length 44100
# Or we can also say that its a matrix of rows 44100 and cols 1

# next is to make fig and axis of matplotlib plt
fig,ax = plt.subplots(figsize=(8,4))

# lets set the title
ax.set_title("PyShine")

# Make a matplotlib.lines.Line2D plot item of color green
# R,G,B = 0,1,0.29

lines = ax.plot(plotdata,color = (0,1,0.29))

# We will use an audio call back function to put the data in queue

def audio_callback(indata,frames,time,status):
	q.put(indata[::downsample,[0]])

# now we will use an another function 
# It will take frame of audio samples from the queue and update
# to the lines

def update_plot(frame):
	global plotdata
	while True:
		try: 
			data = q.get_nowait()
		except queue.Empty:
			break
		shift = len(data)
		plotdata = np.roll(plotdata, -shift,axis = 0)
		# Elements that roll beyond the last position are 
		# re-introduced 
		plotdata[-shift:,:] = data
	for column, line in enumerate(lines):
		line.set_ydata(plotdata[:,column])
	return lines
ax.set_facecolor((0,0,0))
# Lets add the grid
ax.set_yticks([0])
ax.yaxis.grid(True)

""" INPUT FROM MIC """

stream  = sd.InputStream( device = device, channels = max(channels), samplerate = samplerate, callback  = audio_callback)


""" OUTPUT """		

ani  = FuncAnimation(fig,update_plot, interval=interval,blit=True)
with stream:
	plt.show()



# https://newbedev.com/how-to-read-realtime-microphone-audio-volume-in-python-and-ffmpeg-or-similar

import sounddevice as sd
import numpy as np

def print_sound(indata, outdata, frames, time, status):
    volume_norm = np.linalg.norm(indata)*10
    print ("|" * int(volume_norm))

with sd.Stream(callback=print_sound):
    sd.sleep(10000)  # stop in 10 sec, this parameter is in miliseconds

stream = sd.Stream(callback = print_sound)
stream.start()  # undefine type while True


stream = sd.Stream(callback = print_sound)
stream.start()
sd.sleep(10000)  # later of 10 sec
stream.stop()  # stop the stream


58 -------------->> web scraping : requests and bs4 (BeautifulSoup) :

# example 1:

from bs4 import BeautifulSoup
import requests

url = 'https://definicion.de/resena/'
page = requests.get(url)
html = page.content   # all text in html <body font ><br><p>hola</p>< ....


soup = BeautifulSoup(html, 'html.parser') # we'll analyze with html.parce

text = soup.find_all('p') # get just the text, in html everything between <p> </p> will be text.

for line in text:
        print(line.get_text())

# example 2 : download text :

import requests
url = 'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt'
page = requests.get(url)
html = page.content

with open('text.txt', 'wb') as file:
        file.write(html)

# google searches trends:
https://trends.google.com/trends/hottrends/visualize?nrow=5&ncol=5

# example 3 : request img :

html = requests.get(link).text    # the link of the page to scrap imgs.
soup = BeautifulSoup(html, 'html.parser')

for item in soup.find_all('img'):
        print(item['src'])

# use post of requests:
https://j2logo.com/python/python-requests-peticiones-http/

import requests
auth_data = {'email': 'juanjo@j2logo.com', 'pass': '1234'}
resp = requests.post('https://mipagina.xyz/login/', data=auth_data)


import requests
resp = requests.get('http://mipagina.xyz/', timeout=0.01)  # time of wait before recieve the first byte, if not put timeout we will wait indefinitly

# final example pro:

html = requests.get(link).content
soup = BeautifulSoup(html, 'html.parser')
        
data = soup.find_all('script', attrs={"type":"application/ld+json"})

59 -------------->> Threading : threading : Multiprocessing :

# example 1:

from threading import Thread
import random

def A_print():
        while 1:
                n = random.randint(0,10)
                if n == 1:
                        print('A')
                        
def B_print():
        while 1:
                n = random.randint(0,10)
                if n == 10:
                        print('B')


a_function = Thread(target = A_print)
b_function = Thread(target = B_print)

a_function.start()
b_function.start()

name = input('Enter name: ')

print('YOU NAME IS: ', name)

# output:

A
B
A
Enter name:B
A
B
B
YOU NAME IS:  alexander
B
A
B
.
.
.
A
B
B
A
...

# example 2:

from threading import Thread

class Read(Thread):
        # function especial for threading, it will start with 'obj.start' of class father Threading.
        def run(self):
                for i in range(10):
                        print(f'=.= Reading the line {i+1}')
                        
class Speak(Thread):
        def run(self):
                for _ in range(10):
                        print(' Speaking =0=')


mind = Read()
mouth = Speak()

mind.start()  # it will start the function 'run' in a second plane.
mouth.start()

mind.join() # until that the function 'run' no finished, not could continue. 
mouth.join()

print('finish')

output:

=.= Reading the line 1
=.= Reading the line 2
 Speaking =0=
 Speaking =0=
=.= Reading the line 3
 Speaking =0=
 Speaking =0=
=.= Reading the line 4
 Speaking =0=
=.= Reading the line 5
 Speaking =0=
=.= Reading the line 6
=.= Reading the line 7
 Speaking =0=
 Speaking =0=
 Speaking =0=
 Speaking =0=
=.= Reading the line 8
=.= Reading the line 9
=.= Reading the line 10
finish

# Example 3 (without 'obj.join'):

from threading import Thread

class Read(Thread):
        def run(self):
                for i in range(10):
                        print(f'=.= Reading the line {i+1}')
                        
class Speak(Thread):
        def run(self):
                for _ in range(10):
                        print(' Speaking =0=')

mind = Read()
mouth = Speak()

mind.start()
mouth.start()

## mind.join()
## mouth.join()

print('finish')

# output:

=.= Reading the line 1
=.= Reading the line 2
=.= Reading the line 3
finish
=.= Reading the line 4
 Speaking =0=
=.= Reading the line 5
 Speaking =0=
=.= Reading the line 6
 Speaking =0=
=.= Reading the line 7
 Speaking =0=
=.= Reading the line 8
 Speaking =0=
=.= Reading the line 9
 Speaking =0=
=.= Reading the line 10
 Speaking =0=
 Speaking =0=
 Speaking =0=
 Speaking =0=


# with arguments :

processThread = threading.Thread(target=processLine, args=(dRecieved,))  # <- note extra ','
processThread.start()


# MULTIPROCESSING :

# Without multiprocessing, that is to say, Multithreading :

* one process.
* takes less memory.
* quicker to start.
* slower for a large amount of data.
* memory is shared between threads.
* one GIL(Global Interpreter Lock).

import time
begin = time.time()

for i in range(1000):
        accumulator = 1
        for j in range(10000):
                accumulator *= j

total = time.time() - begin
print(f'It took {total} seconds.') # output: It took 0.8749325275421143 seconds.

# Using multiprocessing :

* multiple processes.
* takes more memory
* quicker to start.
* slower to start.
* faster for a large amount of data.
* memory is not automatically shared between process.
* a GIL(Global Interpreter Lock) for each process.

from multiprocessing import Pool
import time

def test(n):
        accumulator = 1
        for i in n:
                accumulator *= i
        return accumulator

if __name__ == "__main__":
        begin = time.time()

        process = Pool()
        result = process.map(test, range(10000))
        process.close()
        process.join()

        total = time.time() - begin
        print(f'It took {total} seconds.') # output: It took 0.402921199798584 seconds.

60 -------------->> concatenate video and audio : use ffmpeg : convert video to audio : compress large video :

DATA

"size" - percent pixel size of the converted video in relation to the original.
"bitrate" - bitrates of original and converted videos.
"definition" - pixel size of videos.
"convert" - time to convert the video in seconds.

To compress for web at a reasonable broadband bitrate of about 1.5Mbps video / 128kbps audio.
Mbps less the memory will be lite.
Kbps less the memory will be lite or lieghtwidth.


# first: 
conda install -c menpo ffmpeg
pip install ffmpeg-python

# option 1:

import ffmpeg

input_video = ffmpeg.input('./test/test_video.mp4')
input_audio = ffmpeg.input('./test/test_audio.mp4') # also can be mp3, wav, etc. 

ffmpeg.concat(input_video, input_audio, v=1, a=1).output('./processed_folder/finished_video.mp4').run()

# option 2:

import subprocess
videofile = "video.mp4"
audiofile = "audio.mp4"
outputfile = "output.mp4"
codec = "copy"

subprocess.run(f"ffmpeg -i {videofile} -i {audiofile} -c {codec} {outputfile}")

# convert video to audio:

import subprocess
videofile = "video.mp4"
outputfile = "output.mp3"

subprocess.run(f"ffmpeg -i {videofile} {outputfile}")


# compress large video:

import subprocess
videofile = "video.mp4"
outputfile = "output.mp4"
subprocess.run(f"ffmpeg -i {videofile} -c:v libx264 -b:v 1.5M -c:a libvo_aacenc -b:a 128K {outputfile}")  # of 1.37 GB to 17.2 MB
## in cmd it will be> ffmpeg -i "video.mp4" -c:v libx264 -b:v 1.5M -c:a libvo_aacenc -b:a 128K "output.mp4"   # normal compress
ffmpeg -i "video.mp4" -c:v libx264 -b:v 0.3M -c:a libvo_aacenc -b:a 128K "output.mp4"  # lite compress


# cut mp3

Cortar los primeros 11 segundos de un mp3:

$ ffmpeg -i miMp3.mp3 -t 11 mis11segundos.mp3

y ya está.

Cortar 11 segundos a partir del segundo 42 de un mp3

C:\...> ffmpeg -i miMp3.mp3 -ss 42 -t 11 mis11nuevosSegundos.mp3

D:\...> ffmpeg -i mivideo.mp4 -ss 360 -t 100 cortovideo.mp4     # desde el segundo 360(6 min) cortar 100 segundos(1 min y 40 sec) apra adelante.

# cortar audio desde 1 segundo hasta al final:
ffmpeg -i grito.mp3 -ss 1 new_grito.mp3

Convertir de un mp3 a un wav:

$ ffmpeg -i miMp3.mp3 miWav.wav

Quitarle canales a un audio para que ocupe menos (util para móviles)

$ ffmpeg -i miMp3.mp3 -ac 1 miMp3Mono.mp3

61 -------------->> zip file : zip-file : zipfile :

# save zip-files:

## example 1:
from zipfile import ZipFile
zipObj = ZipFile('sample.zip', 'w')
zipObj.write('test1.xlsx')
zipObj.write('test2.mp3')
zipObj.write('test3.docx')
zipObj.write('test4.pdf')
zipObj.close()

## example 2:
from zipfile import ZipFile
with ZipFile('sample.zip', 'w') as zipObj:
	zipObj.write('test1.xlsx')
	zipObj.write('test2.mp3')
	zipObj.write('test3.docx')
	zipObj.write('test4.pdf')
	zipObj.write('imgs')

# save folders in zip:

from zipfile import ZipFile
import os

folderpath = 'test' # 'test' is a folder

with ZipFile('sample.zip', 'w') as zipObj:
        for FolderName, OtherFolders, FileName in os.walk(folderpath): # [('test', ['other_folder'], ['a.xlsx', 'b.mp3', 'c.docx', 'd.pdf']), ('test\\other_folder', [], [])]
                for filename in FileName:
                        path = os.path.join(FolderName, filename)
                        zipObj.write(path)

# save all elements between the folders in a zip:

from zipfile import ZipFile
import os

folderpath = 'test' # 'test' is a folder

with ZipFile('sample.zip', 'w') as zipObj:
        for FolderName, OtherFolders, FileName in os.walk(folderpath):
                for filename in FileName:
                        path = os.path.join(FolderName, filename)
                        zipObj.write(path, os.path.basename(path)) # 'path' where it is, and 'basename' for saving it isnt in a directory with its main name(a.xlsx).

# unzip files or folders:

from zipfile import ZipFile

with ZipFile('sample.zip', 'r') as zipObj:
        zipObj.extractall()


from zipfile import ZipFile
ZipFile('sample.zip').extractall()


## unzip and re asign path:

from zipfile import ZipFile

folder_output = 'folder_unzip'

with ZipFile('sample.zip', 'r') as zipObj:
        zipObj.extractall(path=folder_output)

# unzip with filters:

from zipfile import ZipFile

with ZipFile('sample.zip', 'r') as zipObj:
        
        listOfFileNames = zipObj.namelist() # ['test/a.xlsx', 'test/b.mp3', 'test/c.docx', 'test/d.pdf', 'test/other_folder/test3.docx', 'test/other_folder/test4.pdf']
        
        for fileName in listOfFileNames:
                if fileName.endswith('.pdf'):
                        zipObj.extract(member=fileName, path='folder_filterer')

62 -------------->> pip install progress : bar progress :

# all types of bar(use this in for or define steps): https://warehouse-camo.ingress.cmh1.psfhosted.org/3201b627b24822c33240f8d6ceb4834c0c3e4c13/68747470733a2f2f7261772e6769746875622e636f6d2f7665726967616b2f70726f67726573732f6d61737465722f64656d6f2e676966
Bar
ChargingBar
FillingSquaresBar
FillingCirclesBar
IncrementalBar
PixelBar
ShadyBar

There are 5 predefined spinners(use this when we unknow number of steps or undefine steps(while)):

Spinner
PieSpinner
MoonSpinner
LineSpinner
PixelSpinner

from progress.bar import Bar  # 1 type of bar.

bar = Bar('Processing', max=20)
for i in range(20):
    # Do some work
    bar.next()
bar.finish()


# i prefer this:
from progress.bar import ChargingBar

with ChargingBar('Processing', max=20) as bar:  
    for i in range(20):
        # Do some work
        bar.next()


from progress.spinner import Spinner

spinner = Spinner('Loading ')
while state != 'FINISHED':
    # Do some work
    spinner.next()


63 -------------->> image scanner : scanner through  print :

 from imagescanner import ImageScanner

 # instantiate the imagescanner obj 
 iscanner = ImageScanner()

 # get all available devices
 scanners = iscanner.list_scanners()

 # choose one of the devices
 scanner = scanners[0]

 # scan your file (returns a PIL object)
 scanner.scan()

64 -------------->> use sys :

# taskkill sys.exit :

import sys
try:
	a = input()
except:
	sys.exit(1) # parameter 1 for errors, exit or finish script

sys.exit(0)  # equals to sys.exit(), 0 is by default, finish script


# Return the size of object in bytes : getsizeof :

import sys
a = 3
b = 'a'
class Test:
     def __init__(self):
          self.value = 100
          self.chain = 'value'
c = Test()
print(sys.getsizeof(a)) # 28 # bytes
print(sys.getsizeof(b)) # 50
print(sys.getsizeof(c)) # 48

>>> a = [1,2,3]
>>> sys.getsizeof(a)
120
>>> a = (1,2,3)
>>> sys.getsizeof(a)
64
>>> a = {1,2,3}
>>> sys.getsizeof(a)
216
>>> a = {1:10,2:20,3:30}
>>> sys.getsizeof(a)
232


# get the directory of your python version :

>>> import sys
>>> sys.prefix

'C:\\Program Files\\Blender Foundation\\Blender 2.92\\2.92\\python'


65 -------------->> function functools : use cache : 

import time, sys
from functools import cache

# function "cache" -> "@cache".
# Simple lightweight unbounded cache.  Sometimes called "memoize".
# help(cache)

@cache   # this is the magic
def fibo1(n):
    if n <=1:
        return 1
    return fibo1(n-1) + fibo1(n-2)

# the previous is "almost equivalent" to 'fibo2':
def fibo2(n,data={}):
    if n <=1:
        return 1
    try:
        return data[n]
    except:
        value = fibo2(n-1) + fibo2(n-2)
        data[n] = value
        return value

sys.setrecursionlimit(10000)
    
begin = time.time()
print(fibo1(1000))
print(time.time() - begin)

begin = time.time()
print(fibo2(1000))
print(time.time() - begin)

66 -------------->> emoji : use emoji :

# pip install emoji

# print a emoji:

import emoji

print(emoji.emojize(':thumbs_up:'))
print(emoji.emojize('Python is :thumbs_up:'))
print(emoji.emojize("Python is fun :red_heart:"))


# about all emojis:

import emoji
#help(emoji) # if you want know more.
data = list(emoji.EMOJI_UNICODE_ENGLISH) # all emojis example {':thumbs_up:':emoji like up}
for e in data[-100:]:
    print(emoji.emojize(e))

67 -------------->> pywhatkit : text or string in handwriter or done in hand or people : real text :
documentation: https://pypi.org/project/pywhatkit/

# text to handwrite :
import pywhatkit

text = ''' Todo el mundo piensa igual, desde el 2017 la humanidad
        ah termiando de pensar o es solo el pensaminto individual de mi.
        La gente se da cuenta de lo que ahce a cierta edad o momento, uno
        nunca sambra cuando se presentara la iluminacion de tu vida <3.
        '''
pywhatkit.text_to_handwriting(text, rgb=(0,0,255))

string (required) - String that you want to convert to handwritten text
save_to (optional, val = "pywhatkit.png") - Path where the image will be saved
rgb (optional, val = [0,0,138]) - Color of the handwritten character in rgb format


# message wsp:

import pywhatkit as kit
kit.sendwhatmsg()

phone_num (required) - Phone number of target with country code
message (required) - Message that you want to sendwhatmsg
time_hour (required) - Hours at which you want to send message in 24 hour format
time_min (required) - Minutes at which you want to send message
wait_time (optional, val=20) - Seconds after which the message will be sent after opening the web
print_waitTime (optional, val=True) - Will print the remaining time if set to true

68 -------------->> use perfplot :

# it package is usefull for making measures, etc.
# example of https://stackoverflow.com/questions/35215161/most-efficient-way-to-map-function-over-numpy-array

import numpy as np
import perfplot
import math

def f(x):
    # return math.sqrt(x)
    return np.sqrt(x)

vf = np.vectorize(f)

def array_for(x):
    return np.array([f(xi) for xi in x])

def array_map(x):
    return np.array(list(map(f, x)))

def fromiter(x):
    return np.fromiter((f(xi) for xi in x), x.dtype)

def vectorize(x):
    return np.vectorize(f)(x)

def vectorize_without_init(x):
    return vf(x)

perfplot.show(
    setup=np.random.rand,
    n_range=[2 ** k for k in range(20)],
    kernels=[f, array_for, array_map, fromiter,
             vectorize, vectorize_without_init],
    xlabel="len(x)",
)

69 -------------->> use copy : package copy :

import copy
labels_copy = copy.copy(labels)    # similar to list function .copy()

70 -------------->> docstrings : docs strings :

# when you cursor stay in any param of class or function class it will provide about the class or method.

class Person():
        """
        Person class

        Attributes:
        -----------

        Private:

          __age: int
            this is the person's age

          __sex: str
            this is the sex.

        Public:

          name: str
            this is the name.

        Methods:
        ________

        get_info (self,): str
            return a str about the all attributes


        """
        def __init__(self, name, age, sex):
                """Constructor for Person

                name: put person's name str data type
                age: put an integer(int) which is person's age
                sex: 'male' or 'female' str data type
                """
                self.name = name
                self.__age = age
                self.__sex = sex
                
        def get_info(self):
                """function get info

                return: call the object how print or str return a chain of text about the data
                """
                return self.name + ' / ' + str(self.__age) + ' / ' +self.__sex


someone = Person(, ,)
someone.get_info()

71 -------------->> module msvcrt : kbhit : getch :

import msvcrt
import time

while True:
    time.sleep(1)
    if msvcrt.kbhit():
        # Only if there's a keypress waiting do we get it with getch()
        print "Key hit! ({})".format(msvcrt.getch())
    else:
        # Do something else here
        print "Nothing..."

72 -------------->>
73 -------------->>
74 -------------->>
75 -------------->>
76 -------------->>
77 -------------->>
78 -------------->>
79 -------------->>

