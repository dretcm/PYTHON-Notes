--------------------------------------------------------- PYQT5------------------------------------------------------------}
More About PyQt5: https://codetorial.net/en/pyqt5/intro.html

--------------->> VALIDACIONES :

usar el: 

try: 
	//proceso a seguir}
except ERROR A DAR:
	//mensaje

1 ---------------->    VENTANA SIMPLE :

from PyQt5 import uic
from PyQt5.QtWidgets import QApplication

Form, Window = uic.loadUiType("dialog.ui")

app = QApplication([])
window = Window()
form = Form()
form.setupUi(window)
window.show()
app.exec_()

- me :

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
dig =uic.loadUi("primer.ui")

dig.show()
app.exec()


/// aplicaion de calculadora: 

from PyQt5 import QtWidgets, uic

class Calculadora:
	vil=2
	def __init__(self):
		self.app = QtWidgets.QApplication([])
		self.app.setApplicationDisplayName('HOLA GENTE') # change the title of the window
		self.dig = uic.loadUi("primer.ui")

		self.dig.boton1.clicked.connect(self.suma)

		self.dig.boton2.clicked.connect(self.mul)

		self.dig.boton3.clicked.connect(self.divide)

		self.dig.boton4.clicked.connect(self.power)

		self.dig.show()
		self.app.exec()

	def suma(self):
		self.dig.e3.setText(str(int(self.dig.e1.text()) + int(self.dig.e2.text()) ))
	def mul(self):
		self.dig.e3.setText(str( int(self.dig.e1.text()) * int(self.dig.e2.text())  ))
	def divide(self):
		self.dig.e3.setText(str(  int(self.dig.e1.text()) / int(self.dig.e2.text()) ))
	def power(self):
		self.val=1
		self.ele=int(self.dig.e2.text())
		for i in range(self.ele):
			self.val*=int(self.dig.e1.text())
		self.dig.e3.setText(str(self.val))


yo = Calculadora()


2 ----------->>> ENTRADAS :

dig.nombre.setText("valor a poner")
self.dig.input_1.clear() # similar al anterior pero limpia la entrada

dig.nombre.text()  //saca valor

self.dig.nombre.setPlaceholderText("resultado")    //va a tener cuando no haya texto ese sinvolo o lo q ingreses

self.dig.e1.setFocus() //para que este azulito

def show():
	pass
self.dig.nombre.returnPressed.connect(self.show)   /// PARA APRETAR ENTER EN VEZ DEL CLICK MUY MUY IMPORTANTE.


self.dig.nombre.setReadOnly(True)   // para solo leida de datos y bloqueada para interactuar.

// formato texto:

dig.input_1.setStyleSheet('font: 75 11pt "Arial";')

3 ------------>>> BOTONES:
def funcion():
	pass

dig.button_1.clicked.connect(funcion)


self.dig.button_2.setEnabled(True) # activa boton

self.dig.button_2.setEnabled(False) # desactiva boton

4 -------------->>>> LISTAS CON ENTRADA O ListWidgets ():

from PyQt5 import QtWidgets, uic

class Prueba:
	def __init__(self):
		self.app=QtWidgets.QApplication([])
		self.dig=uic.loadUi("tercero.ui")

		self.dig.boton1.clicked.connect(self.add_element)
		self.dig.enter1.returnPressed.connect(self.add_element)
		self.dig.enter1.setPlaceholderText(" Enter text ")
		self.dig.show()
		self.app.exec()

	def add_element(self):
		if not self.dig.enter1.text() == "":
			self.dig.enterlista.addItem(self.dig.enter1.text())
			self.dig.enter1.setText("")

yo = Prueba()


5--------------->>>> Message Box

from PyQt5.QtWidgets import *

QMessageBox(None,"title","message")


from PyQt5.QtWidgets import QMessageBox

app = QtWidgets.QApplication([])

def show(title, text):
   msgBox = QMessageBox()
   msgBox.setIcon(QMessageBox.Warning)  # we can changue by QMessageBox.Information

   msgBox.setText(text)
   msgBox.setWindowTitle(title)

   msgBox.setStandardButtons(QMessageBox.Ok)

   msgBox.exec()

show('Error','Ingrese bien su nombre por favor.')

app.exec()


6 -------------->>>> PARA INSERTAR DATOS DESDE SQLITE3 HASTA UNA TABLEWIDGET :

from PyQt5 import QtWidgets, uic
from PyQt5.QtWidgets import *
import sqlite3

class Class8:
	def __init__(self):

		self.app=QtWidgets.QApplication([])
		self.dig=uic.loadUi("clase8.ui")

		self.dig.boton1.clicked.connect(self.show_data)
		self.dig.show()
		self.app.exec()

	def show_data(self):
		conn=sqlite3.connect("data8.db")
		c=conn.cursor()
		c.execute("select * from curso ")
		for row,user in enumerate(c.fetchall()):
			self.dig.entradatodo.insertRow(row)
			for column,data in enumerate(user):
				val=QtWidgets.QTableWidgetItem(str(data))
				self.dig.entradatodo.setItem(row,column,val)
		conn.commit()
		c.close()


yo = Class8()

//// ELIMINAR DATOS Y LIMPIAR LA LISTA COMPLETA :

def delete_all_table(self):
	while(self.dig.entradatodo.rowCount()>0):
		self.dig.entradatodo.removeRow(0)


7 ------------->>> CHECKBUTTONS :

self.check_val=0
if self.dig.check1.isChecked():
	self.check_val=1

8----------->>>>> CAMBIO DE FORMA IMAGEN COLOR EN QT DESINGNER :

-changeStyelSheet click

border-radius:60px;   //para que cambie de foram a redodne y pueves ver sus respectivos angulos.


https://www.youtube.com/watch?v=TRKebElniyo&t=799s  //para insertar imagenes.


9 ------------------->>> MOSTRAR IMAGENES : background :

from PyQt5 import QtWidgets, uic
from PyQt5.QtWidgets import *
from PyQt5 import QtGui            //CLAVE

app=QtWidgets.QApplication([])
dig=uic.loadUi("aquitodo.ui")

dig.label1.setPixmap(QtGui.QPixmap("bgsky.png"))    //MODIFICACION.

dig.show()
app.exec()


// y el el Qt Designer  ... darle check al scaledcontents

// background pantallas

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
app.setStyleSheet("QMainWindow{background-image: url(bg.jpg)}")

# app = QtWidgets.QApplication([])  # background COLOR
# app.setStyleSheet("QMainWindow{background: black;}")

dig = uic.loadUi("desing.ui")

# w = QtWidgets.QMainWindow()  # una ventana aparte
# w.setStyleSheet("QMainWindow{background-image: url(bg.jpg)}")
# w.resize(591, 435)
# w.show()

dig.show()
app.exec()

// font of labels:

dig.label.setStyleSheet("background: white;")

# color labels:

        self.l1 = QLabel(self.photo,self)
        self.l1.setGeometry(50,20,100,20)
        self.l1.setStyleSheet('font: 10pt "Arial";')
        self.l1.setTextFormat(Qt.RichText)
        self.l1.setStyleSheet("color: red;")

10 ------------->>> TALLA DE PANTALLA:

1-click mainwindow
2-size constraints
3-selecionas lo que quieres maximo o minimo o lo que tienes con set minimun or maximun size que seria ambos.

11 ------------->>> Text Browser:

// add elements and set format:

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
app.setStyleSheet("QMainWindow{background-image: url(bg.jpg)}")

dig = uic.loadUi("desing.ui")

def send():
    dig.textBrowser.append(dig.input_1.text())
    dig.input_1.setText('')
    
dig.textBrowser.setStyleSheet('font: 75 11pt "Arial";')
dig.input_1.setStyleSheet('font: 75 11pt "Arial";')
dig.button_1.clicked.connect(send)

dig.show()
app.exec()


// scroll bar in the botton or top:

self.dig.textBrowser.verticalScrollBar().setValue(self.dig.textBrowser.verticalScrollBar().maximum()) # max
self.dig.textBrowser.verticalScrollBar().setValue(self.dig.textBrowser.verticalScrollBar().minimum()) # min

12 ------------>>> Titulo de ventana: Icono de la ventana :

self.PyQt5.QtWidgets.setWindowTitle('my window app')

from PyQt5.QtGui import QIcon
self.PyQt5.QtWidgets.setWindowIcon(QIcon('cat_and_dogs.png'))

13 ------------>>> Negrita in text_Browser:

self.tb = QTextBrowser()
self.tb.setAcceptRichText(True) # este por default esta true
self.tb.setOpenExternalLinks(True) # y este es para entrada de enlaces externos.

<b>Bold</b>  # negrita
<i>Italic</i> 
<p style="color: red">Red</p>
<p style="font-size: 20px">20px</p>
<a href="https://www.naver.com">Naver</a>

self.tb.append('<b>'+name+'</b>') # agrega un texto en negrita
self.nickname = '<font face="impact" color = "red">'+name+'</font>'
self.nickname = '<b><font color = "red">'+name+'</font></b>'

14 ------------>>> Cerrar las ventanas de PyQt5:

self.app = QtWidgets.QApplication([])
self.app.closeAllWindows()

15 ------------>>> Combo box: ComboBox :

from PyQt5 import QtWidgets, uic

app = QtWidgets.QApplication([])
dig =uic.loadUi("interface_yt.ui")

items = ['mp4-720p', 'mp4-480p', 'mp4-360p','mp3']

for i in items:
 dig.comboBox.addItem(i)   # add items

dig.comboBox.setStyleSheet('font: 75 11pt "Arial";')  # font

text = str(dig.comboBox.currentText()) # get item selected

def run(txt):
        print(txt)

dig.comboBox.activated[str].connect(run) # print text when it was selected


dig.show()
app.exec()


16 ------------>>> checkBox:

dig.checkBox.isChecked()  # Return the status of the check box. (True/False)

17 ------------>>> Progress Bar :

from PyQt5.QtWidgets import QProgressBar

app = QtWidgets.QApplication([])
dig =uic.loadUi("interface_yt.ui")

dig.progressBar.setMaximum(0)   # max and min = 0 for bar [ ///    ] => [   ///  ] => [     ///] => [///   ] => etc.
dig.progressBar.setMinimum(0)

dig.progressBar.setVisible(True) # Fasle for hiding the bar.

dig.show()
app.exec()


# other

self.bar = QProgressBar(self)
self.bar.setGeometry(60,120,180,30)
self.bar.setVisible(False)
self.bar.setMaximum(0)
self.bar.setMinimum(0)

18 ------------>>> QtCore : QThread : Threading 

# para que no se congele las ventanas, y lleve las tareas a un segundo plano.

from urllib.request import urlopen
from PyQt5.QtCore import QThread  # this
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton

class Downloader(QThread):
    def __init__(self, url, filename):
	#super().__init__()
	QThread.__init__(self)

        self._url = url
        self._filename = filename
    def run(self):
        # Abrir la direcci√≥n de URL.
        with urlopen(self._url) as r:
            with open(self._filename, "wb") as f:
                # Leer el contenido y escribirlo en un nuevo archivo.
                f.write(r.read())

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ejemplo de descarga de archivo")
        self.resize(400, 300)
        self.label = QLabel("Presione el bot√≥n para iniciar la descarga.",
            self)
        self.label.setGeometry(20, 20, 200, 25)
        self.button = QPushButton("Iniciar descarga", self)
        self.button.move(20, 60)
        self.button.pressed.connect(self.initDownload)
    
    def initDownload(self):
        self.label.setText("Descargando archivo...")

        # Deshabilitar el bot√≥n mientras se descarga el archivo.
        self.button.setEnabled(False)

        # Ejecutar la descarga en un nuevo hilo.
        self.downloader = Downloader("https://www.python.org/ftp/python/3.7.2/python-3.7.2.exe", "python-3.7.2.exe")

        # Qt invocar√° el m√©todo `downloadFinished()` cuando el hilo 
        # haya terminado.

        self.downloader.finished.connect(self.downloadFinished)  # important
        self.downloader.start()
    
    def downloadFinished(self):
        self.label.setText("¬°El archivo se ha descargado!")
        # Restablecer el bot√≥n.
        self.button.setEnabled(True)
        # Eliminar el hilo una vez que fue utilizado.
        del self.downloader

if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()

# more about this, " https://recursospython.com/guias-y-manuales/tareas-en-segundo-plano-con-pyqt/ ".

19 ------------>>> 

--------------------------------------------------------- PYQT5 (REMASTERER)------------------------------------------------------------

more: https://codetorial.net/en/pyqt5/index.html
more: https://zetcode.com/pyqt/qlistwidget/

1 ------------->>> LineEdit : Entry :

from PyQt5.QtWidgets import QWidget, QApplication, QLineEdit

class MyList(QWidget):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        self.entry = QLineEdit(self)

        self.show()


app = QApplication(sys.argv)
ex = MyList()
sys.exit(app.exec_())

2 ------------->>> QListWidget : List :

# example 1:

class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        vbox = QVBoxLayout(self)

        listWidget = QListWidget()
            
        listWidget.addItem("sparrow") 
        listWidget.addItem("robin")
        listWidget.addItem("crow")
        listWidget.addItem("raven")
        listWidget.addItem("woodpecker")
        listWidget.addItem("hummingbird")

        # listWidget.addItems(fileNames) # for severals items type list, tuple, etc.
            
        listWidget.itemDoubleClicked.connect(self.onClicked) # dobule click
	listWidget.itemClicked.connect(self.onClicked)   # one click
	list_widget.itemSelectionChanged.connect(self.gooo)  # while you select a item
        
        vbox.addWidget(listWidget)
        self.setLayout(vbox)

        self.setGeometry(300, 300, 350, 250)
        self.setWindowTitle('QListWidget')
        self.show()

    def onClicked(self, item):

        QMessageBox.information(self, "Info", item.text())

# pop a item : drop object item :
QListWidget.takeItem( index ) # return the object item


QListWidget.count() # count of elements
position = 0 # or 1, 2, 10, etc.
QlistWidget.item(position).text() # get element in str

# get value
value = list_widget.currentItem().text()  # item in python
print(self.list_widget.currentRow())   # index


# set text item : edit item through a click :
self.FileList.currentItem().setText(text)

def move_items(self):
        item = self.list_widget.currentItem()
        item.setFlags(item.flags() | QtCore.Qt.ItemIsEditable)
        self.list_widget.editItem(item)


# set index :

    currentRow = self.ventana.listWidget.currentRow()
    currentItem = self.ventana.listWidget.takeItem(currentRow)
    self.ventana.listWidget.insertItem(currentRow - 1, currentItem)


# move : drag : drop : ITEMS :

from PyQt5.QtWidgets import QApplication, QListWidget, QListWidgetItem, QListView, QMainWindow
import sys
  
  
class Window(QMainWindow):
  
    def __init__(self):
        super().__init__()
  
        self.setWindowTitle("Python ")

        self.setGeometry(100, 100, 500, 400)

        self.UiComponents()
        self.show()
  

    def UiComponents(self):
            
        self.list_widget = QListWidget(self)
  
        self.list_widget.setGeometry(50, 70, 150, 100)
  
        item1 = QListWidgetItem("A")
        item2 = QListWidgetItem("B")
        item3 = QListWidgetItem("C")
  
        self.list_widget.addItem(item1)
        self.list_widget.addItem(item2)
        self.list_widget.addItem(item3)
        
        # self.list_widget.setMovement(QListView.Free) # not necesary.
        
        self.list_widget.setDragDropMode(self.list_widget.InternalMove)

        self.list_widget.model().rowsMoved.connect(self.move_items)

    def move_items(self):
            print(self.list_widget.currentRow())


App = QApplication(sys.argv)
window = Window()
sys.exit(App.exec())


3 ------------->>> example complet : message box : layout : combo box : list widget : image window :

import sys #, os
import numpy as np
from PyQt5.QtWidgets import (QListWidget, QWidget, QMessageBox, QApplication, QVBoxLayout, QHBoxLayout, QLineEdit, 
    QLabel,QPushButton, QComboBox)
from matplotlib.backends.backend_qt5agg import FigureCanvas
from matplotlib.figure import Figure
from PyQt5.QtGui import QIcon


class UiVectors(QWidget):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        self.setWindowIcon(QIcon('yasu.ico'))  # image to window

        self.x = np.array([])
        self.y = np.array([])
        self.posx = np.array([])
        self.posy = np.array([])
        self.color = []

        self.l1 = QLabel('Entry elements:',self)
        self.l1.setStyleSheet('font: 11pt "Arial";')

        self.entry_x = QLineEdit(self)
        self.entry_x.setStyleSheet('font: 75 11pt "Arial";')
        self.entry_x.setPlaceholderText('x')

        self.entry_y = QLineEdit(self)
        self.entry_y.setStyleSheet('font: 75 11pt "Arial";')
        self.entry_y.setPlaceholderText('y')

        self.entry_posx = QLineEdit(self)
        self.entry_posx.setStyleSheet('font: 75 11pt "Arial";')
        self.entry_posx.setPlaceholderText('x origin')
        self.entry_posx.setText('0')

        self.entry_posy = QLineEdit(self)
        self.entry_posy.setStyleSheet('font: 75 11pt "Arial";')
        self.entry_posy.setPlaceholderText('y origin')
        self.entry_posy.setText('0')

        self.cbox = QComboBox(self)
        self.cbox.setStyleSheet('font: 75 11pt "Arial";')
        colors = ['red','green','orange','blue','skyblue','gold','brown', 'black']
        for c in colors:
            self.cbox.addItem(c)
        
        self.b_one = QPushButton('Send',self)
        self.b_one.setStyleSheet('font: 10pt "Arial";')
        self.b_one.clicked.connect(self.send_elements)

        self.b_clear = QPushButton('Clear',self)
        self.b_clear.setStyleSheet('font: 10pt "Arial";')
        self.b_clear.clicked.connect(self.clear_all)

        self.b_back = QPushButton('Back',self)
        self.b_back.setStyleSheet('font: 10pt "Arial";')
        self.b_back.clicked.connect(self.back_data)

        self.b_save = QPushButton('Save',self)
        self.b_save.setStyleSheet('font: 10pt "Arial";')
        self.b_save.clicked.connect(self.save_data)       

        vbox = QVBoxLayout()
        hbox = QHBoxLayout()

        vbox.addWidget(self.l1)

        hbox.addWidget(self.entry_posx)
        hbox.addWidget(self.entry_x)
        vbox.addLayout(hbox)

        hbox = QHBoxLayout()
        hbox.addWidget(self.entry_posy)
        hbox.addWidget(self.entry_y)
        vbox.addLayout(hbox)

        vbox.addWidget(self.cbox)
        vbox.addWidget(self.b_one)
        vbox.addWidget(self.b_clear)

        hbox = QHBoxLayout()
        hbox.addLayout(vbox)
        vbox = QVBoxLayout()

        self.list = QListWidget()
        vbox.addWidget(self.list)
        hbox.addLayout(vbox)

        self.fig = Figure((450,450))
        self.canvas = FigureCanvas(self.fig)

        vbox = QVBoxLayout()

        hbox2 = QHBoxLayout()
        hbox2.addWidget(self.b_back)
        hbox2.addWidget(self.b_save)

        vbox.addLayout(hbox2)
        vbox.addWidget(self.canvas)
        vbox.addLayout(hbox)

        self.setLayout(vbox)
        del(hbox2)

        self.setWindowTitle('Yasu plots')
        self.resize(600,600)
        self.show()

    def send_elements(self):
        try:
            x,y,color = int(self.entry_x.text()), int(self.entry_y.text()), str(self.cbox.currentText())
            posx, posy = int(self.entry_posx.text()), int(self.entry_posy.text())
            self.list.addItem(f' origin: [{posx},{posy}] - vector: [{x}, {y}] - color: {color}.')

            self.x = np.append(self.x, x)
            self.y = np.append(self.y, y)
            self.color.append(color)
            self.posx = np.append(self.posx, posx)
            self.posy = np.append(self.posy, posy)

            self.draw_vectors(self.posx, self.posy, self.x,self.y,self.color)

        except:
            self.dialog()

        self.entry_x.clear()
        self.entry_y.clear()
        self.entry_posx.setText('0')
        self.entry_posy.setText('0')

    def draw_vectors(self, posx = np.array([0]), posy=np.array([0]), x = np.array([0]), y = np.array([0]), color = ['black']):
        self.fig.clear()
        auxx = posx + x
        auxy = posy + y
        xx, xy =  np.min(auxx), np.max(auxx)
        yx, yy = np.min(auxy), np.max(auxy)
        
        if xx < 0:
            xx -= 1
            if xy < 0:
                xy = 0
        else:
            xx = -1
        xy += 1
        if yx < 0:
            yx -=1
            if yy < 0:
                yy = 0
        else:
            yx = -1
        yy += 1

        try:
            ax = self.fig.add_subplot(111)
            for i,c in enumerate(color):
                ax.quiver([posx[i]],[posy[i]],[x[i]], [y[i]], color=c, angles='xy', scale_units='xy', scale=1, alpha=1)
            
            ax.axvline(x=0,c='gray',zorder=0) # zorder for background
            ax.axhline(y=0,c='gray',zorder=0)

            ax.axes.set_xlim([xx,xy])
            ax.axes.set_ylim([yx,yy])

            ax.set_title('Plot Vectors')
            
            ax.grid()
            self.canvas.draw()
        except:
            self.x = self.x[:-1]
            self.y = self.y[:-1]
            self.color.pop(-1)
            self.posx = self.posx[:-1]
            self.posy = self.posy[:-1]

    def clear_all(self):
        self.list.clear()
        self.x = np.array([])
        self.y = np.array([])
        self.color.clear()
        self.posx = np.array([])
        self.posy = np.array([])
        # self.fig.clear()
        self.draw_vectors()
        self.canvas.draw()

    def back_data(self):
        try:
            self.x = self.x[:-1]
            self.y = self.y[:-1]
            self.color.pop(-1)
            self.posx = self.posx[:-1]
            self.posy = self.posy[:-1]

            length = len(self.color)
            if length == 0:
                self.draw_vectors()
                self.list.takeItem(0)
            else:
                self.draw_vectors(self.posx, self.posy, self.x,self.y,self.color)
                self.list.takeItem(length-1)
        except:
            self.dialog()

    def save_data(self):
        #path = os.path.dirname(os.path.abspath(__file__)) + '\\vector.png'
        path = 'vector.png'
        self.canvas.print_png(path)
        self.dialog(title='Save', text=f'Successfully saved! with the name "{path}".', icon=QMessageBox.Information)

    def dialog(self, title='Error!', text = 'There was a mistake.', icon=QMessageBox.Warning):
        msgBox = QMessageBox(self)
        msgBox.setIcon(icon)
        msgBox.setText(text)
        msgBox.setWindowTitle(title)
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec()

4 ------------->>> convert : ToolBar : File Dialog :

import sys
from converts import *
from PyQt5.QtWidgets import (QWidget, QMessageBox, QApplication, QAction, qApp, QToolBar,
        QVBoxLayout, QHBoxLayout, QLineEdit, QLabel,QPushButton, QComboBox, QFileDialog)
from PyQt5.QtGui import QIcon

class MyList(QWidget):
        def __init__(self):
                super().__init__()

                self.initUI()
                
                self.setWindowTitle('Convert(pdf,word)')
                self.resize(400,100)

                self.show()

        def initUI(self):

                self.menu = QToolBar(self)
                self.menu.setGeometry(0, 0, 50, 25)  # pos x, pos y, width, height
                
                self.action1 = QAction(QIcon('file.png'),'Open',self)
                self.menu.addAction(self.action1)
                
                self.entry = QLineEdit(self)
                self.entry.setStyleSheet('font: 12pt "Arial";')
                self.entry.setReadOnly(True)
                self.entry.setGeometry(5, 30, 250, 20)
                
                self.button = QPushButton('Convert', self)
                self.button.setStyleSheet('font: 10pt "Arial";')
                self.button.setGeometry(270, 30, 100, 50)
                
                self.option = QComboBox(self)
                self.option.setStyleSheet('font: 12pt "Arial";')
                self.option.setGeometry(5, 60, 250, 25)

                options = ['pdf to word', 'word to pdf']
                for op in options:
                        self.option.addItem(op)

##                vbox = QVBoxLayout()
##                vbox.addWidget(self.entry)
##                vbox.addWidget(self.option)
##
##                hbox = QHBoxLayout()
##                hbox.addLayout(vbox)
##                hbox.addWidget(self.button)
##
##                vbox = QVBoxLayout()
##                vbox.addWidget(self.menu)
##                vbox.addLayout(hbox)
##
##                self.setLayout(vbox)
##
##                del(vbox)
##                del(hbox)

                # functions:

                self.button.clicked.connect(self.run_convert)
                self.action1.triggered.connect(self.openfile)

                
        def run_convert(self):
                try:
                        option = str(self.option.currentText())
                        path = str(self.entry.text())
                        
                        if option == 'pdf to word':
                                pdf2docx(path)
                        elif option == 'word to pdf':
                                docx2pdf(path)
                except:
                        self.dialog(text='There was a mistake with the path or the file.')
##                finally:
##                        self.entry.clear()

        def openfile(self):
                options = QFileDialog.Options()
                #options |= QFileDialog.DontUseNativeDialog
                filename, aux = QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*);;Pdf Files (*.pdf);;Word Files (*.docx)", options=options)
##                print(fileName)  # C:\documentos... etc
##                print(aux)  # All Files, or according you choose the filter.
                if filename:
                    self.entry.setText(str(filename))
        def dialog(self, title='Error!', text = 'There was a mistake.', icon=QMessageBox.Warning):
                
                msgBox = QMessageBox(self)
                msgBox.setIcon(icon)
                msgBox.setText(text)
                msgBox.setWindowTitle(title)
                msgBox.setStandardButtons(QMessageBox.Ok)
                msgBox.exec() 


app = QApplication(sys.argv)
exe = MyList()
sys.exit(app.exec_())


5 ------------->>> get folder and his directory : QFileDialog :

from PyQt5.QtWidgets import QFileDialog

# get one file : select only one file :

        def openfile(self):
                options = QFileDialog.Options()
                filename, _ = QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*);;Images jpg (*.jpg);;Images PNG (*.png)", options=options)
                print(filename)
                if filename:
                        self.data_path.append(filename)
                        self.data.addItem(str(os.path.basename(filename)))

# get filenames path : select several filenames :
        def openfile(self):
                options = QFileDialog.Options()
                filenames, _ = QFileDialog.getOpenFileNames(self,"QFileDialog.getOpenFileNames()", "","All Files (*);;Images jpg (*.jpg);;Images PNG (*.png)", options=options)
                print(filenames)
                if filenames:
                        for filename in filenames:
                                self.data_path.append(filename)
                                self.data.addItem(str(os.path.basename(filename)))

# get folder:

folder = str(QFileDialog.getExistingDirectory(self, "Select Directory"))  # return path od directory or folder.

6 ------------->>> QTabWidget : Tab : Tabs :

import sys
from PyQt5.QtWidgets import (QWidget, QApplication,QTabWidget)
from image2pdf import FastConvert
from word2pdf_all import WordPdfConvert
                
class Gestor(QWidget):
        def __init__(self):
                super().__init__()

                self.initUI()
                
                self.setWindowTitle('gestor')
                self.resize(445,260)

                self.show()

        def initUI(self):
                tab1 = FastConvert()   # other class with widget.
                tab2 = WordPdfConvert()
		tab3 = QWidget()

                tabs = QTabWidget(self)
                tabs.addTab(tab1,'tab1')
                tabs.addTab(tab2,'tab2')
                tabs.addTab(tab3,'tab3 empty')
                tabs.setGeometry(15,10,425,240)

                # functions:

                
if __name__=='__main__':
        app = QApplication(sys.argv)
        aux = Gestor()
        sys.exit(app.exec_())

7 ------------->>> messague box :

import sys
from PyQt5.QtWidgets import QWidget, QMessageBox, QApplication
from PyQt5.QtGui import QIcon

class Dialogs(QWidget):
        def __init__(self):
                super().__init__()

        @staticmethod
        def dialog(title='Error!', text = 'There was a mistake.', icon=QMessageBox.Warning):
                
                msgBox = QMessageBox()
                msgBox.setWindowIcon(QIcon('images\\yasu.ico'))
                if icon:
                        msgBox.setIcon(icon)
                msgBox.setText(text)
                msgBox.setWindowTitle(title)
                msgBox.setStandardButtons(QMessageBox.Ok)
                msgBox.exec()
                
if __name__=='__main__':
        app = QApplication(sys.argv)
        aux = Dialogs.dialog()
        sys.exit(app.exec_())

# types of icons:

msg.setIcon(QMessageBox.Information)
msg.setIcon(QMessageBox.Question)
msg.setIcon(QMessageBox.Warning)
msg.setIcon(QMessageBox.Critical)

8 ------------->>> QTextEdit : Text Edit : text edit :

import sys
from PyQt5.QtWidgets import QWidget, QApplication, QTextEdit

class MyIDE(QWidget):
        def __init__(self):
                super().__init__()
                self.resize(400,300)
                self.UI()
        def UI(self):
                self.text = QTextEdit(self)
                self.text.setAcceptRichText(True)

                self.show()

if __name__=='__main__':
        App = QApplication(sys.argv)
        window = MyIDE()
        sys.exit(App.exec_())

# example :

import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QTextEdit, QVBoxLayout


class MyApp(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):

        self.lbl1 = QLabel('Enter your sentence:')
        self.te = QTextEdit()
        self.te.setAcceptRichText(False)
        self.lbl2 = QLabel('The number of words is 0')

        self.te.textChanged.connect(self.text_changed)

        vbox = QVBoxLayout()
        vbox.addWidget(self.lbl1)
        vbox.addWidget(self.te)
        vbox.addWidget(self.lbl2)
        vbox.addStretch()

        self.setLayout(vbox)

        self.setWindowTitle('QTextEdit')
        self.setGeometry(300, 300, 300, 200)
        self.show()

    def text_changed(self):

        text = self.te.toPlainText()
        self.lbl2.setText('The number of words is ' + str(len(text.split())))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MyApp()
    sys.exit(app.exec_())


9 ------------->>> QCheckBox :

cb = QCheckBox('Show title', self)

cb.toggle() # by default is empty, is call this function, it will be on.


if cb.isChecked():
	...
  	...

10 ------------->>> background :

self.setStyleSheet("background: black;")
self.setStyleSheet("background-image: url(background.png);")

bg = QLabel('',self)
bg.setGeometry(0, 0, 400, 270)
bg.setStyleSheet("background-image: url(background.png);")

bg = QLabel('',self)
bg.setGeometry(0, 0, 400, 270)
bg.setStyleSheet("background: black;")

11 ------------->>>
12 ------------->>>
